#!/usr/bin/perl -w

# $Id: test-gx-map,v 1.6 2005-05-27 12:00:34-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/test-gx-map,v $

use strict;

use File::Basename ();
use Getopt::Long ();
use Cwd ();

sub Usage(@);
sub Unpack($);
sub Try(@);
sub Version_String($);
sub Cleanup();

$| = 1;

my $Program_Name = File::Basename::basename $0;
my $cwd = Cwd::getcwd;

my $default_perl = '/usr/bin/perl';
my $default_path = '/bin:/usr/bin';
my $default_tmpdir = "$ENV{HOME}/gx-map-test-$$";

my %Opt = ( perl    => $default_perl,
            path    => $default_path,
            tmpdir  => $default_tmpdir,
            cleanup => 1 );
my @Opts = ( \%Opt, qw( perl=s
                        path=s
                        tmpdir=s
                        verbose!
                        cleanup!
                        help ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $Opt{help};
Usage if scalar @ARGV != 1;

my $Tarball = $ARGV[0];
if ($Tarball !~ /^\//) {
    $Tarball = "$cwd/$Tarball";
}
Usage "No file $Tarball\n" if not -e $Tarball;

my $tarball_basename = File::Basename::basename $Tarball;
my($version) = ($tarball_basename =~ /^gx-map-(.*)\.tar\.gz$/);
Usage if not defined $version;

$SIG{__DIE__} = \&Cleanup;

if (not $Opt{verbose}) {
    print "Creating directory $Opt{tmpdir}\n";
}
foreach my $dir ( $Opt{tmpdir},
                  "$Opt{tmpdir}/src", 
                  "$Opt{tmpdir}/grid-security",
                  "$Opt{tmpdir}/grid-security/certificates" )
{
    print "Creating directory $dir\n" if $Opt{verbose};
    mkdir $dir, 0777 or die "${dir} $!\n";
}

my $namespace = uc $ENV{USER} . '_TEST';
my $config_file = "$Opt{tmpdir}/$namespace.conf";
my $install_dir = "$Opt{tmpdir}/gx-map-$version-$namespace-install";
my $data_dir    = "$Opt{tmpdir}/gx-map-$version-$namespace-data";

open CONF, ">$config_file" or die "$config_file: $!\n";
print CONF <<"EOF";
PERL                     $Opt{perl}
PATH                     $Opt{path}
NAMESPACE                $namespace
INSTALL_DIR              $install_dir
DATA_DIR                 $data_dir
REQUESTS_LOG_PERMISSIONS 444
GLOBUS_ADMINS            $ENV{USER}
ADMIN_EMAIL              $ENV{USER}\@example.org
EOF
close CONF;

chdir "$Opt{tmpdir}/src" or die "$Opt{tmpdir}/src: $!\n";
Unpack $Tarball;
chdir "gx-map-$version" or die "gx-map-${version}: $!\n";

if ($Opt{verbose}) {
    Try './configure-gx-map', $config_file;
    Try 'make', 'install';
}
else {
    Try "./configure-gx-map $config_file >/dev/null 2>&1";
    Try 'make install >/dev/null 2>&1';
}

my @commands = ();
#
# gx-map was renamed to gx-request in release 0.4.5 (but gx-map
# still exists as a symlink).
#
# gx-ingest was added in release 0.4.0, but didn't have a "-version"
# option until release 0.4.2.
#
if (Version_String $version ge Version_String '0.4.5') {
    push @commands, 'bin/gx-request';
}
push @commands, 'bin/gx-map';
push @commands, 'sbin/gx-check-requests';
push @commands, 'sbin/gx-ca-update';
if (Version_String $version gt Version_String '0.4.0') {
    push @commands, 'sbin/gx-ca-update';
}
if (Version_String $version ge Version_String '0.4.2') {
    push @commands, 'sbin/gx-ingest';
}

foreach my $command (@commands) {
    Try "$install_dir/$command", "-version";
}

if ($Opt{cleanup}) {
    chdir '/tmp';
    Try 'rm', '-rf', $Opt{tmpdir};
}

########################################################################

sub File_Count($) {
    opendir DIR, $_[0] or die "$_[0]: $!\n";
    my @files = grep { $_ ne '.' and $_ ne '..' } readdir DIR;
    closedir DIR;
    return scalar @files;
} # File_Count

# ----------------------------------------------------------------------

sub Unpack($) {
    my($tarball) = @_;
    print "Unpacking $tarball\n";
    my $count = File_Count '.';

    foreach my $command ( "tar zxf $tarball",
                          "zcat $tarball | tar xf -",
                          "gzcat $tarball | tar xf -" )
    {
        my $result = system "$command >/dev/null 2>&1";
        my $new_count = File_Count '.';
        if ($new_count > $count) {
            if ($result == 0) {
                return;
            }
            else {
                die "Problem unpacking $tarball\n";
            }
        }
    }

} # Unpack

# ----------------------------------------------------------------------

sub Try(@) {
    print "% @_\n";
    my $result = system @_;
    if ($result == 0) {
        return;
    }
    elsif ($result % 256 == 0) {
        $result /= 256;
        die "exit $result\n";
    }
    else {
        die "system() returned $result\n";
    }
} # Try

# ----------------------------------------------------------------------

#
# Reformat a version string to a form that can be compared with gt/lt,
# so, for example, 0.4.10 is greater than 0.4.9.
#
sub Version_String($) {
    return join('.', map sprintf("%05s", $_), split /\./, $_[0]);
} # Version_String

# ----------------------------------------------------------------------

sub Cleanup() {
    if ($Opt{cleanup} and -d $Opt{tmpdir}) {
        chdir $ENV{HOME};
        Try 'rm', '-rf', $Opt{tmpdir};
    }
} # Cleanup

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_;
    print <<"EOF";
Usage: $Program_Name [options] gx-map-<VERSION>.tar.gz
Installs and tests a gx-map release.
    -perl ...     Specify full path to Perl interpreter
                  Default is $default_perl
    -path ...     Value for \$PATH to be used by the installation
                  Default is $default_path
                  Should provide access to the following commands:
                  wget ncftpget rcs ci openssl hostname
    -tmpdir ...   Temporary directory (will be created)
                  Default is $default_tmpdir (may vary)
    -[no]verbose  Produce verbose output
                  Default is -noverbose
    -[no]cleanup  Delete temporary directory when done
                  Default is -cleanup
    -help         Display this message and exit
EOF
    exit 1;
} # Usage
