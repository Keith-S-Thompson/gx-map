#!%PERL% -T

# $Id: gx-cron-job.in,v 1.17 2006-11-06 01:51:44-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-cron-job.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2006 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;
use warnings;

use File::Basename ();
use Getopt::Long ();

sub Usage(@);
sub Debug(@);
sub Debugf(@);
sub Get_Jobs($);
sub Run_Jobs();
sub Status_Image($);

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

my $Default_Config_File = "$Install_Dir/etc/gx-map/gx-cron-job.conf";

my $Program_Name = File::Basename::basename $0;

my $User_Opt = { 'config-file' => $Default_Config_File,
                  check        => 1 };
my @Opts = ( $User_Opt,
             qw( help
                 version
                 daemon!
                 check!
                 dryrun!
                 debugging!
                 config-file=s ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $Gridmap_Utils::VERSION\n";
    exit 0;
}

Gridmap_Utils::Install_Die_Handler;
Gridmap_Utils::Install_Warn_Handler;

my $Hostname = Gridmap_Utils::Get_Hostname();

Debug "\$hostname = $Hostname\n";

my $config_file_timestamp = 0;
my @Jobs;

if ($User_Opt->{daemon}) {
    Debug "Running in daemon mode\n";
    while (1) {
        my $sleep_time = 60 - time % 60;
        if ($sleep_time == 0) {
            $sleep_time = 60;
        }
        Debug "sleep $sleep_time\n";
        sleep $sleep_time;
        Debug scalar gmtime time, " UTC\n";
        Run_Jobs;
    }
}
else {
    Debug "Single run\n";
    Run_Jobs;
}

########################################################################

sub Get_Jobs($) {
    my($config_file) = @_;
    my @result = ();

    my %is_valid_field = map { $_ => 1 } qw(name interval hostname command);

    my @errors = ();

    Debug "Reading config file $config_file\n";
    @result = Gridmap_Utils::Read_Records $config_file;
    Debug "Got ", scalar @Jobs, " job(s)\n";

    for (my $i = 0; $i <= $#result; $i ++) {
        my $job = $result[$i];

        if (not defined $job->{name}) { 
            $job->{name} = "# " . ($i+1);
        }

        foreach my $key (sort keys %$job) {
            if (not $is_valid_field{$key}) {
                push @errors, "Invalid key \"$key\" in job $job->{name}\n";
            }
        }

        if (not defined $job->{interval}) {
            push @errors,  "No interval specified for job $job->{name}\n";
        }
        elsif ($job->{interval} =~ /^\d+$/) {
            $job->{offset} = 0;
        }
        elsif ($job->{interval} =~ /^(\d+)\+(\d+)$/) {
            $job->{interval} = $1;
            $job->{offset}   = $2;
        }
        else {
            push @errors, "Unrecognized interval $job->{interval} " .
                          "in job $job->{name}\n";
        }

        if (defined $job->{hostname}) {
            my @hostnames = ();
            if (ref $job->{hostname} eq 'ARRAY') {
                @hostnames = @{$job->{hostname}};
            }
            else {
                @hostnames = ( $job->{hostname} );
            }
            foreach my $hostname (@hostnames) {
                $job->{match_hostname}->{$hostname} = 1;
            }
        }

        if (not defined $job->{command}) {
            push @errors,  "No command specified for job $job->{name}\n";
        }
        else {
            if (ref $job->{command} ne 'ARRAY') {
                $job->{command} = [ $job->{command} ];
            }

            foreach my $command (@{$job->{command}}) {
                #
                # Specify the patterns indirectly so configure-gx-map
                # doesn't try to substitute them.
                #
                my $hostname_pattern = '%HOSTNAME' . '%';
                my $version_pattern  = '%VERSION' . '%';
                $command =~ s/$hostname_pattern/$Hostname/g;
                $command =~ s/$version_pattern/$Gridmap_Utils::VERSION/g;

                if ($command !~ /^\//) {
                    $command = "$Install_Dir/sbin/$command";
                }

                if ($User_Opt->{check}) {
                    my $executable;
                    ($executable = $command) =~ s/\s.*$//;
                    if (not -x $executable) {
                        push @errors, "Missing command $executable in " .
                                      "job $job->{name}\n";
                    }
                }
            }
        }
    }

    if (@errors) {
        die "Reading $config_file:\n", @errors;
    }
    else {
        return @result;
    }
} # Get_Jobs

# ----------------------------------------------------------------------

sub Run_Jobs() {
    my $now = time;
    my $minutes = int($now / 60);

    my $mtime = Gridmap_Utils::Get_mtime $User_Opt->{'config-file'};
    die "$User_Opt->{'config-file'}: $!\n" if not defined $mtime;

    if ($mtime > $config_file_timestamp) {
        @Jobs = Get_Jobs $User_Opt->{'config-file'};
        $config_file_timestamp = $mtime;
    }

    JOB:
    foreach my $job (@Jobs) {
        if (defined $job->{match_hostname} and
            not $job->{match_hostname}->{$Hostname})
        {
            Debug "Skipping job $job->{name}, " .
                  "hostname $Hostname doesn't match\n";
            next JOB;
        }

        my $current_offset = $minutes % $job->{interval};
        if ($current_offset == $job->{offset}) {
            foreach my $command (@{$job->{command}}) {
                if ($User_Opt->{dryrun}) {
                    print "... Execute $command\n";
                }
                else {
                    Debug "% $command\n";
                    my $status = system $command;
                    if ($status != 0) {
                        my $message = Status_Image $status;
                        warn "$Program_Name: job $job->{name} failed: " .
                             "$message\n";
                    }
                }
            }
        }
        else {
            Debug "Skipping job $job->{name}, " .
                  "needed $job->{offset} mod $job->{interval}, " .
                  "got $current_offset mod $job->{interval}\n";
        }
    }
} # Run_Jobs

# ----------------------------------------------------------------------

sub Status_Image($) {
    my($status) = @_;
    my $exit_value  = $status >> 8;
    my $signal_num  = $status & 0x7f;
    my $dumped_core = $status & 0x80;
    if ($signal_num == 0) {
        return "exit $exit_value";
    }
    else {
        return "killed by signal $signal_num" .
               ($dumped_core ? ", core dumped" : "");
    }
} # Status_Image

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options]
Option names may be abbreviated.
    -help              : Display this message and exit.
    -version           : Display version information and exit.
    -daemon            : Run in a continuous loop (daemon mode)
                         (default is single execution, as from a cron job)
    -config-file file  : Use the specified configuration file; default is
                         $Default_Config_File
    -[no]check         : By default, gx-cron-job checks that the specified
                         commands are executable.  Use "-nocheck" to
                         disable this check.
    -dryrun            : Display commands but don't run them.
    -debugging         : Display debugging messages
EOF
    exit 1;
} # Usage

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf
