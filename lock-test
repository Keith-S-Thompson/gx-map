#!/usr/bin/perl -w

# $Id: lock-test,v 1.4 2006-04-04 21:48:41-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/lock-test,v $

use strict;
use Net::Domain ();
use Time::HiRes ();
use Fcntl qw(O_WRONLY O_EXCL O_CREAT);

my $Lock_File = '/projects/misc/gx-map/TEST/lock-dir/.lock';

sub Trace($);
sub Get_Lock();
sub Release_Lock();

my $interval = 5;

my $hostname = Net::Domain::hostfqdn;

my $Me = time . ' ' . Net::Domain::hostfqdn() . ".$$";

$| = 1;

while (1) {
    my ($sec, $usec) = Time::HiRes::gettimeofday;
    my $remaining = ($interval - $sec % $interval) * 1e6 - $usec;
    Time::HiRes::usleep $remaining;
    if (Get_Lock) {
        sleep 1;
        Release_Lock;
    }
}

########################################################################

sub Trace($) {
    my($sec, $usec) = Time::HiRes::gettimeofday;
    my $timestamp = sprintf "%010d.%06d", $sec, $usec;
    printf "%010d.%06d %-32s %8d %s\n", $sec, $usec, $hostname, $$, "@_";
} # Trace

# ----------------------------------------------------------------------

#
# Get a lock; the name should be the program name.
# Attempt to create the file; use sysopen so the attempt fails
# if the file already exists.
# If no lock exists, create it and write a line of information
# to it.  (This information is not currently used.)
# If the lock does exist, die.
#
sub Get_Lock() {
    if (sysopen my $Lock, $Lock_File, O_WRONLY | O_EXCL | O_CREAT) {
        my $hostname = Net::Domain::hostfqdn();
        print $Lock "PID=$$ on $hostname\n";
        close $Lock;
        Trace "got lock";
        return 1;
    }
    else {
        Trace "failed to get lock: $!";
        return 0;
    }
} # Get_Lock

# ----------------------------------------------------------------------

#
# Delete the lock file created by Get_Lock().
#
sub Release_Lock() {
    if (unlink $Lock_File) {
        Trace "released lock";
    }
    else {
        Trace "failed to release lock: $!";
    }
} # Release_Lock

