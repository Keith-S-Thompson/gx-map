#!/usr/bin/perl

# $Id: verify-file,v 1.8 2007-09-05 19:35:36-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/0064/verify-file,v $

use strict;
use warnings;

use File::Basename ();
use Getopt::Long ();

use lib '/usr/local/apps/gx-map-0.5.9.046/lib';
use GX ();
use GX::Error ();

sub Run_Or_Die(@);
sub OpenSSL_Version($);
sub Usage(@);

$| = 1;

my $Program_Name = File::Basename::basename $0;
my $User_Opt = { 'certificates-directory' => '/etc/grid-security/certificates',
                  openssl => 'openssl' };
my @Opts = ( $User_Opt,
             qw( help!
                 certificates-directory=s
                 openssl=s
                 ignore_critical!
                 openssl_allow_proxy_certs!
                 smart!
                 keep!
                 verbose! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if scalar @ARGV != 1;

if (defined $User_Opt->{smart} and
    ( defined $User_Opt->{ignore_critical} or
      defined $User_Opt->{openssl_allow_proxy_certs} ))
{
    Usage "Can't use \"-smart\" with either \"-ignore_critical\"\n",
          "or \"-openssl_allow_proxy_certs\"\n";
}

# Just an abbreviation
my $Certs_Dir = $User_Opt->{'certificates-directory'};

my $input_file  = $ARGV[0];

GX::Set_Config;

GX::Use_Commands 'openssl';

if ($User_Opt->{verbose}) {
    print "% $User_Opt->{openssl} version\n";
    system $User_Opt->{openssl}, 'version';
}
my $version = OpenSSL_Version $User_Opt->{openssl};
if ($User_Opt->{smart}) {
    if (not defined $version) {
        die "Can't determine OpenSSL version\n";
    }
    $User_Opt->{openssl_allow_proxy_certs} = 1;
    if ($version >= 0x00908000) {
        $User_Opt->{ignore_critical} = 1;
    }
}

my $temp_dir = GX::Make_Temp_Dir;

opendir my $CERTS_DIR, $Certs_Dir or die "$Certs_Dir: $!\n";
my @files_to_symlink = sort grep /\.r?0$/, readdir $CERTS_DIR;
closedir $CERTS_DIR;

foreach my $file (@files_to_symlink) {
    symlink "$Certs_Dir/$file", "$temp_dir/$file"
        or die "symlink $Certs_Dir/$file, $temp_dir/${file}: $!\n";
}

my @multi = GX::Read_Multifile $input_file, $temp_dir;

# print ">>> Got ", scalar @multi, " subfile(s):\n";
# foreach my $subfile (@multi) {
#     print "    $subfile->{filename}\n";
# }

if (scalar @multi < 2) {
    die "Need at least two subfiles in $input_file\n"
}

my $signed_file  = $multi[0]->{filename};
my $signing_cert = $multi[1]->{filename};
my $output_file;
if ($signed_file =~ /^(.*)\.signed$/) {
    $output_file = $1;
}
else {
    $output_file = "$signed_file.recovered";
}

# print ">>> Signed file is $signed_file->{filename}\n";
# system 'ls', '-l', $temp_dir;

my @command = ( $User_Opt->{openssl},
                'smime', '-verify', '-text',
                '-in', $signed_file,
                '-out', $output_file,
                '-CApath', $temp_dir,
                '-certfile', $signing_cert );
if ($User_Opt->{ignore_critical}) {
    push @command, '-ignore_critical';
}
print "% @command\n" if $User_Opt->{verbose};
if ($User_Opt->{openssl_allow_proxy_certs}) {
    $ENV{OPENSSL_ALLOW_PROXY_CERTS} = 1;
}
Run_Or_Die @command;

if ($User_Opt->{keep}) {
    print "\$temp_dir = $temp_dir\n";
}
else {
    GX::Delete_Temp_Dir $temp_dir;
}

########################################################################

sub Run_Or_Die(@) {
    my(@command) = @_;
    my $status = system @command;
    if ($status != 0) {
        my $message = "@command failed";
        if (($status & 0xff) == 0) {
            my $exit_status = $status >> 8;
            $message .= ", exit $exit_status";
        }
        else {
            $message .= ", system() returned $status";
        }
        die "$message\n";
    }
} # Run_Or_Die

# ----------------------------------------------------------------------

#
# Invokes "openssl version" and computes a numeric version number.
# The result is similar to the value of the OPENSSL_VERSION_NUMBER macro
# defined in "openssl/opensslv.h", but the patch and status fields are
# ignored (since we don't currently make use of that information).
#
sub OpenSSL_Version($) {
    my ($openssl) = @_;
    my($command) = @_;
    my $version_string;
    GX::Use_Commands 'openssl';
    open my $Pipe, '-|', $openssl, 'version';
    while (<$Pipe>) {
        if (/^OpenSSL\s+(\S+)/) {
            $version_string = $1;
        }
    }
    close $Pipe;
    if (defined $version_string and
        $version_string =~ /^(\d+)\.(\d+)\.(\d+)/)
    {
        my($major, $minor, $fix) = ($1, $2, $3);
        foreach my $v ($major, $minor, $fix) {
            return undef if $v < 0 or $v > 99;
        }
        return ($major<<28) + ($minor<<20) + ($fix<<12);
    }
    return undef;
} # OpenSSL_Version

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] filename
    -help               Show this message and exit
    -certificates-directory dir
                        Certificates directory.
                        Default is /etc/grid-security/certificates
    -openssl command    Full path to openssl command; default is
                        determined by gx-map's default PATH.
    -ignore_critical    Pass "-ignore_critical" option to "openssl smime"
    -openssl_allow_proxy_certs
                        Set environement variable \$OPENSSL_ALLOW_PROXY_CERTS
    -smart              Set "--ignore_critical" and "-openssl_allow_proxy_certs"
                        based on OpenSSL version.
    -keep               Keep temporary directory.
    -verbose            Print a few more messages.
EOF
exit 1;
} # Usage
