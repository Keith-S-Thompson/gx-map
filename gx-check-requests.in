#!%PERL% -T

# $Id: gx-check-requests.in,v 1.124 2007-10-19 20:19:31-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-check-requests.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;
use warnings;

use File::Basename ();
use File::Copy ();
use Getopt::Long ();
use Fcntl (qw(O_RDONLY O_NONBLOCK));

my $Install_Dir;
BEGIN { $Install_Dir = '%INSTALL_DIR%'; }
use lib "$Install_Dir/lib";
use GX ();

sub Usage(@);
sub Process_Signed_Request($);
sub Get_Request_Info($);
sub Append_To_Log($@);
sub Check_Admin_Accounts();
sub Debug(@);
sub Debugf(@);

my $Program_Name = File::Basename::basename $0;

my $Now = time;

my $Hostname = GX::Get_Hostname;
my $Default_Data_Dir = "$Install_Dir/gx-map-data";

my $User_Opt = { propagate => 1 };
my @Opts = ( $User_Opt,
             qw( help!
                 version!
                 copy=s
                 dryrun!
                 add-only!
                 propagate!
                 debugging! ) );
             # directory=s
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
Usage if @ARGV;

GX::Set_Config;

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $GX::VERSION\n";
    exit 0;
}

GX::Check_Data_Dir;

#
# All admin accounts must exist on the current system.
# Bail out if any are missing.
#
Check_Admin_Accounts;

#
# This program may only be executed by the GX_MAP_OWNER.
#
GX::Require_Owner $Program_Name;

$GX::Debugging = 1 if $User_Opt->{debugging};

GX::Install_Die_Handler;
GX::Install_Warn_Handler;

# my $Data_Dir = defined $User_Opt->{directory}
#                      ? $User_Opt->{directory}
#                      : $Default_Data_Dir;
my $Data_Dir = $Default_Data_Dir;
GX::Untaint $Data_Dir;
if ($Data_Dir !~ /^\//) {
    die "Data directory $Data_Dir is not an absolute pathname\n";
}
my $requests_log      = "$Data_Dir/requests.log";
my $errors_log        = "$Data_Dir/errors.log";
my $new_requests_dir  = "$Data_Dir/new-requests";
my $good_requests_dir = "$Data_Dir/good-requests";
my $bad_requests_dir  = "$Data_Dir/bad-requests";

my $dir_error = GX::Dir_Error $new_requests_dir;
die "$dir_error\n" if defined $dir_error;
die "No directory $new_requests_dir\n" if not -d $new_requests_dir;
if (not -d $good_requests_dir) {
    mkdir $good_requests_dir, 0700 or die "mkdir $good_requests_dir: $!\n";
}
if (not -d $bad_requests_dir) {
    mkdir $bad_requests_dir, 0700 or die "mkdir $bad_requests_dir: $!\n";
}

GX::Get_Lock $Program_Name;

my @required_keys = qw( operation timestamp requested_by_name
                        requested_by_uid hostname );
my @valid_keys = ( @required_keys,
                   qw( dn username email comment
                       user_uid source scope
                       Verified Signer_Subject Message ) );
my @valid_operations = qw( add remove remove-dn remove-user );
my %is_required_key    = map { $_ => 1 } @required_keys;
my %is_valid_key       = map { $_ => 1 } @valid_keys;
my %is_valid_operation = map { $_ => 1 } @valid_operations;

opendir my $DIR, $new_requests_dir or die "$new_requests_dir: $!\n";
my @files = sort grep { $_ ne '.' and $_ ne '..' } readdir $DIR;
closedir $DIR;

Debug "\@files = ( @files )\n";

foreach my $file (@files) {
    GX::Untaint $file;
}

#
# Process signed request files.
# For each signed request, delete the signed request from the list of
# files and add the new generated request file.
#
my %is_file = map { $_ => 1 } @files;
foreach my $file (grep /\.request\.multi$/, @files) {
    my $result = Process_Signed_Request "$new_requests_dir/$file";
    my $result_basename = File::Basename::basename $result;
    if (not GX::Error::Is_Error $result) {
        Debug "After successful Process_Signed_Request\n";
        Debug "    Removing $file\n";
        Debug "    Adding $result_basename\n";
        GX::Save_File filename   => $file,
                      source_dir => $new_requests_dir,
                      target_dir => $good_requests_dir;
                    # timestamp  => $timestamp{$file};
        #
        # TODO: Warn about failures in Save_File.
        # TODO: Consider setting timestamp.
        # (see other calls, below).
        delete $is_file{$file};
        $is_file{$result_basename} = 1;
    }
}
@files = sort keys %is_file;

Debug "\@files = ( @files )\n";

my @good_requests = ();
my @good_request_files = ();
my @bad_requests = ();
my @bad_request_files = ();
my %timestamp = ();

#
# Now process all ordinary requests, including any that were
# generated above by Process_Signed_Request.
#
foreach my $file (@files) {
    if ($file =~ /\.request\.tmp$/ or
        $file =~ /\.request\.multi\.tmp$/)
    {
        #
        # gx-request creates a temporary *.request.tmp or
        # *.request.multi.tmp file and immediately renames it to *.request
        # or *.request.multi once it's been written.  Ignore any such
        # temporary file as long as its timestamp is within 60 seconds
        # of the current time.  If the file is older or from the future,
        # we'll treat it as an error (Get_Request_Info will see the
        # invalid name).
        #
        my $mtime = GX::Get_mtime $file;
        #
        # If stat fails, ignore the file.  (Most likely we saw the
        # file when gx-request created it, and the stat failed because
        # gx-request already renamed it.)  Fixes bug-0074.
        #
        next if not defined $mtime;
        next if $mtime > $Now - 60 and
                $mtime < $Now + 60;
    }
    my $request = Get_Request_Info "$new_requests_dir/$file";
    if (defined $request->{timestamp} and
        $request->{timestamp} =~ /^\d+/)
    {
        $timestamp{$file} = $&;
    }
    else {
        $timestamp{$file} = undef;
    }
    if (defined $request->{ERRORS}) {
        push @bad_requests, $request;
        push @bad_request_files, $file;
    }
    else {
        push @good_requests, $request;
        push @good_request_files, $file;
    }
}

if (not @good_requests and not @bad_requests) {
    #
    # No requests seen.  Bail out.
    #
    GX::Release_Lock $Program_Name;
    exit;
}

$ENV{PATH} = $GX::Config->{PATH};

#
# We need to invoke gx-propagate *before* appending the good requests
# to the requests.log file, because gx-propagate sometimes needs to
# see the existing requests.
#
# Annotate any propagated requests with a PROPAGATION attribute, set to
# 'ok' if it appears to have succeeded, 'failed: ...' if it failed,
# 'skipped' if the "-nopropagate" option was specified.  or 'dryrun'
# if the "-dryrun" option was specified,
#
my $propagate = "$Install_Dir/sbin/gx-propagate";

if (-x $propagate) {
    #
    # First, check whether the tgcdb.db-config file is ok.
    #
    if ($User_Opt->{propagate} and
        system($propagate, '-check-config') != 0)
    {
        #
        # "gx-propagate -check-config" died with an error message.
        #
        exit 1;
    }

    my @propagation_failures = ();

    REQUEST:
    foreach my $request (@good_requests) {
        if (not $User_Opt->{propagate} or
            (defined $request->{scope} and $request->{scope} eq 'local'))
        {
            $request->{PROPAGATION} = 'skipped';
            next REQUEST;
        }
        my $owner_is_admin =
            ( defined $request->{OWNER_NAME} and
              GX::Is_Admin_Account $request->{OWNER_NAME} );
        if (not $owner_is_admin and defined $request->{username}) {
            my $user_pw = GX::Get_PW_Name $request->{username};
            if (not defined $user_pw) {
                $request->{PROPAGATION}
                    = "failed: $request->{username} " .
                      "has no account on $Hostname";
                push @propagation_failures, $request;
                next REQUEST;
            }
            my $requested_by_pw
                = GX::Get_PW_Name $request->{requested_by_name};
            if (not defined $requested_by_pw) {
                $request->{PROPAGATION}
                    = "failed: $request->{requested_by_name} " .
                      "has no account on $Hostname";
                push @propagation_failures, $request;
                next REQUEST;
            }
        }
        my $dn = $request->{dn};
        if (defined $dn) {
            $dn =~ s/^"//;
            $dn =~ s/"$//;
        }
        my @args = ();
        push @args, '-debugging' if $User_Opt->{debugging};
        push @args, '-dryrun'    if $User_Opt->{dryrun};
        push @args, '-add-only'  if $User_Opt->{'add-only'};
        push @args, '-source', $request->{SOURCE};
        push @args, "-$request->{operation}";
        if ($request->{operation} ne 'remove-dn') {
            push @args, '-username', $request->{username};
        }
        if ($request->{operation} ne 'remove-user') {
            push @args, '-dn', $dn;
        }
        Debug "$propagate @args\n";
        my $result = system $propagate, @args;
        Debug "\$result = $result\n";
        if ($User_Opt->{dryrun}) {
            $request->{PROPAGATION} = 'dryrun';
        }
        elsif ($result == 0) {
            $request->{PROPAGATION} = 'ok';
        }
        else {
            my $message;
            if ($result % 256 == 0) {
                $message = "exit " . $result / 256;
            }
            else {
                $message = "system() returned $result";
            }
            $request->{PROPAGATION} = "failed: gx-propagate: $message";
            push @propagation_failures, $request;
        }
    }
    if (@propagation_failures) {
        my $count = scalar @propagation_failures;
        my $recipient = $GX::Config->{ADMIN_EMAIL};
        my $subject = ($count == 1 ? "gx-propagate: 1 failure"
                                   : "gx-propagate: $count failures");
        my $body = "$propagate\n" .
                   "failed on the following " .
                   ($count == 1 ? "request" : "requests") .
                   ".\n\n";

        $body .= "Please check the logs in the directory\n" .
                 "    $Install_Dir/gx-map-data\n";
        $body .= "You may need to resubmit " .
                 ($count == 1 ? "this request" : "these requests") .
                 "\n\n";

        foreach my $request (@propagation_failures) {
            foreach my $field (sort keys %$request) {
                $body .= sprintf "    %-20s %s\n",
                                 $field,
                                 $request->{$field};
            }
            $body .= "\n";
        }

        $body .= "\n$Program_Name (gx-map $GX::VERSION) " .
                 "on $Hostname\n";

        GX::Send_Email program_name => $Program_Name,
                       recipient    => $recipient,
                       subject      => $subject,
                       body         => $body;
    }
}

#
# We have one or more new requests to process.  Append them to the
# requests log and/or the errors log.
#

Append_To_Log $errors_log,   @bad_requests;
Append_To_Log $requests_log, @good_requests;

if (defined $User_Opt->{copy}) {
    GX::Untaint $User_Opt->{copy};
    GX::Untaint $requests_log;
    my $target_file = $User_Opt->{copy};
    my $tmp_file = $User_Opt->{copy} . ".new";

    File::Copy::copy $requests_log, $tmp_file;
    rename $tmp_file, $target_file;
    chmod 0444, $target_file;
}

#
# Now that the records have been safely appended to the log and
# checked into RCS, move the individual request files into appropriate
# subdirectories.
#
my @rename_errors = ();
foreach my $file (@good_request_files) {
    GX::Save_File filename   => $file,
                  source_dir => $new_requests_dir,
                  target_dir => $good_requests_dir,
                  timestamp  => $timestamp{$file}
        or push @rename_errors, "${file}: $!\n";
}
foreach my $file (@bad_request_files) {
    GX::Save_File filename   => $file,
                  source_dir => $new_requests_dir,
                  target_dir => $bad_requests_dir,
                  timestamp  => $timestamp{$file}
        or push @rename_errors, "${file}: $!\n";
}

if (@rename_errors) {
    print STDERR "Error(s) moving request files:\n",
                 @rename_errors;
}

#
# If any bad request files were detected, send e-mail.
#
if (@bad_request_files) {
    my $count = scalar @bad_request_files;
    my $recipient = $GX::Config->{ADMIN_EMAIL};
    my $subject = ($count == 1 ? "$Program_Name: bad request"
                               : "$Program_Name: $count bad requests");
    my $body = "$Program_Name detected ";
    if ($count == 1) {
        $body .= "a bad request file:\n";
    }
    else {
        $body .= "$count bad request files:\n";
    }
    foreach my $file (@bad_request_files) {
        $body .= "$bad_requests_dir/$file\n";
    }
    $body .= "\n";

    if (@rename_errors) {
        if (scalar @rename_errors == 1) {
            $body .= "Possible error renaming a file\n" .
                     "You may need to remove the file from\n" .
                     "$Data_Dir/new-requests/\n";
        }
        else {
            $body .= "Possible errors renaming " .
                     scalar @rename_errors .
                     " files\n" .
                     "You may need to remove the files from\n" .
                     "$Data_Dir/new-requests/\n";
        }
    }

    $body .= "\n$Program_Name (gx-map $GX::VERSION) on $Hostname\n";

    GX::Send_Email program_name => $Program_Name,
                   recipient    => $recipient,
                   subject      => $subject,
                   body         => $body;
}

GX::Release_Lock $Program_Name;

########################################################################

#
# Given the name of a signed request file (name must match
# *.request.multi), check the signature and generate an ordinary request
# file (*.request) with some additional attributes.  Returns the name
# of the generated request file or a GX::Error object otherwise.
# Note that a request file may be generated even if the signature
# is invalid.
#
sub Process_Signed_Request($) {
    my ($signed_request_file) = @_;
    Debug "Entering Process_Signed_Request(\"$signed_request_file\")\n";
    my $request_file;
    if ($signed_request_file =~ /^(.*\.request)\.multi$/) {
        $request_file = $1;
    }
    else {
        Debug "Process_Signed_Request returning bad file name\n";
        return new GX::Error "Bad file name: $signed_request_file";
    }

    my $verify_result = GX::Verify_File
                            input_file  => $signed_request_file,
                            certs_dir   => $GX::Config->{CERTIFICATES_DIR},
                            output_file => "$request_file.tmp";
    
    if (defined $verify_result->{filename}) {
        #
        # We have an output file (which may or may not be verified).
        # Create a new request file (owned by GX_MAP_OWNER) with
        # additional attributes:
        #     Verified       => yes|no
        #     Signer_Subject => (normalized subject of signing certificate)
        #     Message        => (optional error message)
        #
        # Note that attributes added by gx-request have lower-case
        # names, attributes added here have mixed-case names, and other
        # attributes  added by gx-check-requests have all-caps names.
        #
        my $ref = GX::Read_Records format   => 'single',
                                   filename => $verify_result->{filename};
        $ref->{Verified} = ( $verify_result->{verified} ? 'yes' : 'no' );
        if (defined $verify_result->{subject}) {
            $ref->{Signer_Subject} = '"' . $verify_result->{subject} . '"'
        }
        if (defined $verify_result->{message}) {
            $ref->{Message} = $verify_result->{message};
        }
        GX::Write_Records format   => 'single',
                          filename => $request_file,
                          records  => [ $ref ];
        Debug "Process_Signed_Request returning \"$request_file\"",
              "    Verified => $ref->{Verified}\n";
        return $request_file;
    }
    else {
        Debug "Process_Signed_Request returning verification failure\n";
        return new GX::Error "Unable to verify $signed_request_file";
    }
} # Process_Signed_Request

# ----------------------------------------------------------------------

#
# Given the name of a request file, returns a reference to the information
# from the file.  If any error occurs, the information will include an
# "ERRORS" field, a reference to an array of error messages.
#
# We use an eval block to catch any errors propagated from Read_Records
# via die().
#
sub Get_Request_Info($) {
    my($filename) = @_;
    my $request_file = File::Basename::basename $filename;
    my $processed = GX::Long_Time_Image GX::Get_Time_Of_Day;
    my $FILEHANDLE;
    my $result;

    Debug "Get_Request_Info $filename\n";

    my @errors = ();

    if ($filename !~ /\.request$/) {
        return { REQUEST_FILE => $request_file,
                 PROCESSED    => $processed,
                 ERRORS       => [ 'Bad file name' ] };
    }

    #
    # Open in non-blocking mode.  If an attacker can cause an ordinary
    # open() to block, it could provide more time to take advantage of
    # a race condition, or just implement a DoS attack.
    #
    sysopen $FILEHANDLE, $filename, O_RDONLY|O_NONBLOCK
        or push @errors, "sysopen $filename: $!";
    my $stat  = GX::Stat $FILEHANDLE;
    my $lstat = GX::Stat '-l', $filename;
    my $stat_dev_ino  = "$stat->{dev}/$stat->{ino}";
    my $lstat_dev_ino = "$lstat->{dev}/$lstat->{ino}";

    #
    # Verify that all fields determined by stat and lstat match exactly.
    # For now, look only at fields derived directly from the result
    # returned by stat or lstat; others have names starting with '_'.
    #
    my @mismatches = ();
    foreach my $key (sort keys %$stat) {
        next if $key =~ /^_/;
        if ($stat->{$key} ne $lstat->{$key}) {
            push @mismatches, $key;
        }
    }
    if (@mismatches) {
        my $s = ( scalar @mismatches == 1 ? '' : 's' );
        push @errors, "Mismatched stat field$s: @mismatches";
    }

    if ($stat->{_file_type} ne 'plain') {
        push @errors, "Not a plain file (file type is $stat->{_file_type}";
    }
    if ($stat->{nlink} != 1) {
        push @errors, "Bad link count: $stat->{nlink}";
    }
    if ($stat->{size} > 2048) {
        push @errors, "Request file is too large: $stat->{size} bytes";
    }
    if (not $stat->{_readable}) {
        push @errors, 'File is not readable';
    }

    if (@errors) {
        return { REQUEST_FILE => $request_file,
                 PROCESSED    => $processed,
                 ERRORS       => \@errors };
    }

    eval {
        $result = GX::Read_Records
                      format             => 'single',
                      filename           => $FILEHANDLE,
                      specified_filename => $request_file;
    };
    close $FILEHANDLE;
    if ($@) {
        my $message = $@;
        chomp $message;
        return { REQUEST_FILE => $request_file,
                 PROCESSED    => $processed,
                 ERRORS       => [ $message ] };
    }

    if ($User_Opt->{debugging}) {
        foreach my $key (sort keys %$result) {
            Debug "    $key => $result->{$key}\n";
        }
    }

    my @invalid = ();
    foreach my $key (keys %$result) {
        if (not $is_valid_key{$key}) {
            push @invalid, $key;
        }
    }
    if (@invalid) {
        my $s = (scalar @invalid == 1 ? '' : 's');
        push @{$result->{ERRORS}}, "Invalid key$s: @invalid";
    }

    my @missing = ();
    foreach my $key (@required_keys) {
        if (not defined $result->{$key}) {
            push @missing, $key;
        }
    }
    if (@missing) {
        my $s = (scalar @missing == 1 ? '' : 's');
        push @{$result->{ERRORS}}, "Missing key$s: @missing";
    }

    #
    # Each key may occur only once, except possibly for 'comment'.
    # (We allow multiple 'comment' attributes, but I'm not sure whether
    # this actually occurs.)
    #
    my @multiple = ();
    foreach my $key (keys %$result) {
        if ($key ne 'comment' and
            $key ne 'ERRORS' and
            ref $result->{$key} eq 'ARRAY')
        {
            push @multiple, $key;
        }
    }
    if (@multiple) {
        push @{$result->{ERRORS}}, "Multiple occurrences of: @multiple";
    }

    $result->{REQUEST_FILE} = $request_file;
    $result->{PROCESSED}    = $processed;

    if (defined $result->{ERRORS}) {
        return $result;
    }

    my $OP = $result->{operation}; # just an abbreviation

    if (not $is_valid_operation{$OP}) {
        push @{$result->{ERRORS}}, "Invalid operation";
        return $result;
    }

    #
    # The username field is forbidden for remove-dn, mandatory for
    # other operations.
    #
    if ($OP eq 'remove-dn' and defined $result->{username}) {
        push @{$result->{ERRORS}}, "Extraneous username field";
    }
    elsif ($OP ne 'remove-dn' and not defined $result->{username}) {
        push @{$result->{ERRORS}}, "Missing username field";
    }

    #
    # The dn field is forbidden for remove-user, required for other
    # operations.
    #
    if ($OP eq 'remove-user' and defined $result->{dn}) {
        push @{$result->{ERRORS}}, "Extraneous dn field";
    }
    elsif ($OP ne 'remove-user' and not defined $result->{dn}) {
        push @{$result->{ERRORS}}, "Missing dn field";
    }

    #
    # The username must be legal.
    #
    if (defined $result->{username} and
        not GX::Is_Legal_Username $result->{username})
    {
        push @{$result->{ERRORS}}, 'Illegal username';
    }

    #
    # A DN (as stored in the log file) must start and end with a '"'
    # character; the string between the quotation marks must be valid.
    #
    if (defined $result->{dn}) {
        my $dn_error = GX::DN_Error '-quoted', $result->{dn};
        if (defined $dn_error) {
            push @{$result->{ERRORS}}, $dn_error;
        }
    }

    my $new_timestamp = GX::Timestamp_Of $result->{timestamp};
    if (defined $new_timestamp) {
        $result->{timestamp} = $new_timestamp;

        my $seconds = $new_timestamp;
        $seconds =~ s/[. ].*$//;
        #
        # Make sure the timestamp isn't more than 60 seconds in the future.
        # (Allow 60 seconds for clock skew.)
        #
        if ($seconds - $Now > 60) {
            push @{$result->{ERRORS}},
                 "Future timestamp: $result->{timestamp} vs. $Now";
        }
    }
    else {
        push @{$result->{ERRORS}},
             "Invalid timestamp: $result->{timestamp}";
    }

    #
    # Determine the actual owner of the file.
    #
    my @stat = stat $filename;
    if (not @stat) {
        die "stat failed: $!\n";
    }
    $result->{OWNER_UID} = $stat[4];
    my $OWNER_pw = GX::Get_PW_UID $result->{OWNER_UID};
    if (defined $OWNER_pw and defined $OWNER_pw->{name}) {
        $result->{OWNER_NAME} = $OWNER_pw->{name};
    }

    my $owner_is_admin
        = ( defined $result->{OWNER_NAME} and
            GX::Is_Admin_Account $result->{OWNER_NAME} );

    my $need_signature = ($owner_is_admin and
                          ($OP eq 'add' or $OP eq 'remove-dn'));
    if ($need_signature) {
        if (defined $result->{Verified}) {
            if ($result->{Verified} eq 'yes') {
                if ($result->{Signer_Subject} ne $result->{dn}) {
                    push @{$result->{ERRORS}},
                         "Signer DN doesn't match requested DN";
                    return $result;
                }
            }
            else {
                push @{$result->{ERRORS}}, "Signature not verified";
                return $result;
            }
        }
        else {
            push @{$result->{ERRORS}}, "Missing signature";
            return $result;
        }
    }
    else {
        if (defined $result->{Verified}) {
            push @{$result->{ERRORS}},
                 "\"Verified\" field should not be set";
            return $result;
        }
    }

    my $user_pw;
    my $requested_by_pw;

    if (defined $result->{username}) {
        $user_pw = GX::Get_PW_Name $result->{username};
    }
    $requested_by_pw = GX::Get_PW_UID $result->{requested_by_uid};

    #
    # Check that username matches user_uid (if the account exists).
    #
    if (defined $user_pw and
        defined $result->{user_uid} and
        $user_pw->{uid} ne $result->{user_uid})
    {
        push @{$result->{ERRORS}},
             "username $result->{username} does not " .
             "match user_uid $result->{user_uid}";
    }

    #
    # Check that requested_by_name matches requested_by_uid (if the
    # account exists)
    #
    if (defined $requested_by_pw and
        $result->{requested_by_name} ne $requested_by_pw->{name})
    {
        push @{$result->{ERRORS}},
             "requested_by_name $result->{requested_by_name} does not " .
             "match requested_by_uid $result->{requested_by_uid}";
    }


    #
    # Check that OWNER_UID matches requested_by_uid
    # If a signature was required, the request should be owned by
    # GX_MAP_OWNER, not by the original owner.
    #
    if (not $need_signature and
        $result->{OWNER_UID} ne $result->{requested_by_uid})
    {
        push @{$result->{ERRORS}},
             "OWNER_UID $result->{OWNER_UID} does not " .
             "match requested_by_uid $result->{requested_by_uid}";
    }

    if (defined $result->{username}) {
        if ($result->{username} eq 'root') {
            push @{$result->{ERRORS}}, "Cannot map to root";
        }
        else {
            my $pw = GX::Get_PW_Name $result->{username};
            if (defined $pw and $pw->{uid} == 0) {
                push @{$result->{ERRORS}}, "Cannot map to UID 0";
            }
        }
    }

    if (not $owner_is_admin) {
        if ($OP eq 'remove-dn') {
            push @{$result->{ERRORS}},
                 "remove-dn request by a non-admin";
        }
        elsif (defined $result->{OWNER_NAME} and
               $result->{username} ne $result->{OWNER_NAME})
        {
            push @{$result->{ERRORS}},
                 "request for another user by a non-admin";
        }
        elsif (defined $result->{source} and $result->{source} ne 'user') {
            push @{$result->{ERRORS}},
                 "source set by non-admin";
        }
    }

    #
    # By convention, user-defined options are in lower case, and
    # annotations are in upper case.  The "source" option is
    # both; it can be specified by an administrator running gx-map,
    # and it can be set as an annotation.
    #
    # If "source" is not set, set "SOURCE" to "user" or "admin",
    # depending on who ran gx-map.
    # If "source" is set (only by an administrator), set "SOURCE" to
    # the same value.
    #
    if (defined $result->{source}) {
        $result->{SOURCE} = $result->{source};
    }
    else {
        $result->{SOURCE} = ( $owner_is_admin ? 'admin' : 'user' );
    }

    $result->{NAMESPACE} = $GX::Config->{NAMESPACE};

    if (defined $result->{scope} and
        $result->{scope} ne 'local' and
        $result->{scope} ne 'global')
    {
        push @{$result->{ERRORS}},
             "Invalid scope";
    }

    return $result;
} # Get_Request_Info

# ----------------------------------------------------------------------

sub Append_To_Log($@) {
    my($log_file, @requests) = @_;
    return if not @requests;

    my $log_file_dirname  = File::Basename::dirname  $log_file;
    my $log_file_basename = File::Basename::basename $log_file;
    my $RCS_dir  = "$log_file_dirname/RCS";
    my $RCS_file = "$RCS_dir/$log_file_basename,v";

    if (not -e $log_file) {
        open my $Log, '>', $log_file or die "$log_file: $!\n";
        print $Log "# \$", "Id:\$\n",
                   "# \$", "Source:\$\n",
                   "\n";
        close $Log;
    }

    #
    # The log file is normally read-only.
    # Temporarily make it writable, append the new
    # records to it, then change it back to read-only.
    # Watch out for the permissions on the RCS file (bug-0003).
    #
    my $readonly = oct $GX::Config->{REQUESTS_LOG_PERMISSIONS};
    my $writable = $readonly | 0200;

    if (-e $log_file) {
        chmod $writable, $log_file or die "chmod $log_file: $!\n";
    }

    GX::Write_Records format   => 'multiple',
                      filename => $log_file,
                      records  => \@requests;

    chmod $readonly, $log_file or die "chmod $log_file: $!\n";

    #
    # Now check it into RCS.
    # The RCS file is normally kept locked.
    # Unlock it temporarily to check in the file.
    #
    GX::Use_Commands 'rcs', 'ci';
    system "rcs -l $log_file >/dev/null 2>/dev/null";
    system "ci -u -f $log_file </dev/null >/dev/null 2>/dev/null";

    chmod $readonly, $log_file or die "chmod $log_file: $!\n";
    chmod $readonly, $RCS_file or die "chmod $RCS_file: $!\n";
} # Append_To_Log

# ----------------------------------------------------------------------

#
# Verify that all admin accounts (GX_MAP_OWNER plus ADDITIONAL_ADMINS)
# exist on the current system.  If not, die with an error message.
#
sub Check_Admin_Accounts() {
    my @admins = ( $GX::Config->{GX_MAP_OWNER},
                   split /\s+/, $GX::Config->{ADDITIONAL_ADMINS} );
    my @missing = ();
    foreach my $admin (@admins) {
        #
        # Since we're just checking whether the account exists, there's
        # no need to use GX::Get_PW_Name.
        #
        my @pw = getpwnam $admin;
        if (not @pw) {
            push @missing, $admin;
        }
    }
    if (@missing) {
        my $s = (scalar @missing == 1 ? '' : 's');
        die "Missing admin account$s: @missing\n";
    }
} # Check_Admin_Accounts

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options]
    -help           : Display this message and exit
    -version        : Display version information and exit
    -copy file      : Copy the requests.log file to the specified location
                      (e.g., to make it visible via a web server).
                      The file's mode is set to 444 (-r--r--r--).
    -[no]propagate  : Invoke gx-propagate when appropriate (if it's
                      installed).  The default is "-propagate"; use
                      "-nopropagate to override.  With "-nopropagate",
                      the PROPAGATION attribute will be set to "skipped".
                      Has no effect if gx-propagate isn't installed.
                      Like the "-dryrun" options, the "-nopropagate"
                      option can cause requests to be permanently
                      bypassed; use with caution.
    -add-only       : Passed to gx-propagate.  Indicates that only add
                      requests will be propagated.
    -dryrun         : Passed to sbin/gx-propagate.
                      This is for testing purposes only; it can cause
                      requests to be permanently bypassed.
                      Has no effect if "-nopropagate" is specified.
    -debugging      : Enable debugging output
EOF
#   -directory dir  : Data directory
#                     Default is $Default_Data_Dir
    exit 1;
} # Usage

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf
