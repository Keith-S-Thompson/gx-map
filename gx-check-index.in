#!%PERL% -w

# $Id: gx-check-index.in,v 1.1 2006-09-24 00:54:10-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-check-index.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2006 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

use File::Basename ();
use File::Copy ();
use Getopt::Long ();

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

sub Usage(@);
sub Debug(@);
sub Debugf(@);
sub Get_Index_Info($);  # filename -> hash ref
sub Request($$$);       # add|remove, ref, comment; called by Gen_Request
sub Gen_Request($$);    # old_ref new_ref

my $gx_request_command = "$Install_Dir/bin/gx-request";

my $Program_Name = File::Basename::basename $0;
my $User_Opt = {};
my @Opts = ( $User_Opt, qw( help! version! dryrun! debugging! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $Gridmap_Utils::VERSION\n";
    exit 0;
}
Usage if scalar @ARGV != 1;
my $CA_Name = $ARGV[0];

my $CA = Get_CA_Info $CA_Name;
if (ref $CA eq 'ARRAY') {
    #
    # The returned value is an error message, not a hash reference
    #
    my @errors = map "$_\n", @$CA;
    die @errors;
}

if (not defined $CA->{INDEX}) {
    die "No INDEX specified in $CA->{_FILENAME}\n";
}

my $Index_File;
my $Index_Is_Cached = 0;
if (Gridmap_Utils::Is_URL $CA->{INDEX}) {
    my $result = Gridmap_Utils::Cache_File $CA->{INDEX};
    if (defined $result->{filename}) {
        $Index_File = $result->{filename};
        $Index_Is_Cached = 1;
    }
    else {
        die "$CA->{INDEX}: $result->{error}\n";
    }
}
else {
    $Index_File = $CA->{INDEX};
}

my $Data_Dir = "$Install_Dir/gx-map-data/cacl";

Gridmap_Utils::Get_Lock $Program_Name;

if (! -d $Data_Dir) {
    mkdir $Data_Dir, 0755 or die "$Data_Dir: $!\n";
}
my $Target_Dir = "$Data_Dir/$CA->{hash}";
my $Saved_File = "$Target_Dir/$CA->{hash}.index";
my $Error_File = "$Target_Dir/$CA->{hash}.error";
my $New_File   = "$Saved_File.new";

if (not -e $Saved_File) {
    #
    # We don't have a saved copy of ca.db.index.
    # Create it as an empty file and check it into RCS.
    #
    open FILE, ">$Saved_File" or die "$Saved_File: $!\n";
    close FILE;
    system "ci -l $Saved_File </dev/null >/dev/null 2>/dev/null";
}

#
# $Index_File is the system ca.db.index file.
#
# $Saved_File is a saved copy of the index file, presumably created by
# an earlier execution of this program.
#
# $New_File is a temporary copy of $Index_File, to be compared to
# $Saved_File.
#

my @index_stat = stat $Index_File;
my @saved_stat = stat $Saved_File;
my $Index_File_Size  = $index_stat[7];
my $Index_File_Mtime = $index_stat[9];
my $Saved_File_Size  = $saved_stat[7];
my $Saved_File_Mtime = $saved_stat[9];

if ($Saved_File_Size == $Index_File_Size and
    $Saved_File_Mtime == $Index_File_Mtime)
{
    Debug "Index file has not been not updated, bailing out\n";
    Gridmap_Utils::Release_Lock $Program_Name;
    exit 0;
}

my $result = system 'cp', '-pf', $Index_File, $New_File;
die "cp failed\n" if $result != 0;

my $old_info = Get_Index_Info $Saved_File;
my $new_info = Get_Index_Info $New_File;

my @old_serials = sort { hex $a <=> hex $b } keys %$old_info;
my @new_serials = sort { hex $a <=> hex $b } keys %$new_info;

#
# Confirm that all the serial numbers in the old index file are still
# in the new index file.
# Confirm that all DNs in the old index file are unchanged in the
# new index file.
#
Debug "Checking for errors\n";
my @missing_serials = ();
my @changed_DNs = ();
foreach my $serial (@old_serials) {
    if (not defined $new_info->{$serial}) {
        push @missing_serials, $serial;
    }
    elsif ($new_info->{$serial}->{dn} ne $old_info->{$serial}->{dn}) {
        push @changed_DNs, $serial;
    }
}
if (@missing_serials or @changed_DNs) {
    my $mail_program = undef;
    foreach my $cmd ('/bin/mailx', '/bin/mail') {
        if (-x $cmd) {
            $mail_program = $cmd;
            last;
        }
    }

    my $message = '';
    if (@missing_serials) {
        $message .= "Missing serial numbers: @missing_serials\n";
    }
    if (@changed_DNs) {
        $message .= "Changed DNs: @changed_DNs\n";
    }

    open my $ERROR, '>', $Error_File;
    print $ERROR $message;
    close $ERROR;

    Gridmap_Utils::Send_Email $Program_Name,
                              $Gridmap_Utils::Config{ADMIN_EMAIL},
                              "$CA_Name problem",
                              $message;

    File::Copy::copy $Saved_File, "$New_File.bad";
    # Gridmap_Utils::Release_Lock $Program_Name;
    exit 1;
}

foreach my $serial (@new_serials) {
    Debug "Checking cert $serial";
    my $old_ref = $old_info->{$serial}; # possibly undef
    my $new_ref = $new_info->{$serial};

    if (not defined $new_ref->{uid}) {
        Debug ", not a user certificate\n";
        next;
    }
    elsif (not defined $new_ref->{ou}) {
        Debug ", undefined ou\n";
        next;
    }
    elsif ($new_ref->{ou} ne 'SDSC') {
        Debug ", ou is not \"SDSC\"\n";
        next;
    }
    if (not defined $old_ref) {
        #
        # New entry
        #
        Debug ", new entry, $new_ref->{status}\n";
        Gen_Request undef, $new_ref;
    }
    elsif ($old_ref->{line} ne $new_ref->{line}) {
        #
        # Modified entry
        #
        Debug ", modified entry, $old_ref->{status}", '->',
                                 "$new_ref->{status}\n";
        Gen_Request $old_ref, $new_ref;
    }
    else {
        Debug ", unchanged\n";
    }
}

if ($User_Opt->{dryrun}) {
    print "% rename $New_File $Saved_File\n";
    print "% chdir $Target_Dir\n";
    print "% ci -l $Saved_File\n";
    unlink $New_File;
}
else {
    rename $New_File, $Saved_File;
    chdir $Target_Dir;
    Gridmap_Utils::Use_Commands 'ci';
    system "ci -l $Saved_File </dev/null >/dev/null 2>/dev/null";
}

Gridmap_Utils::Release_Lock $Program_Name;

########################################################################

#
# Given either a hexadecimal hash or a short name, search for
# a matching *.cadesc file and return information about the CA
# using Gridmap_Utils::Get_CA_Ref.
#
sub Get_CA_Info($) {
    my($name) = @_;
    my $is_hash = $name =~ /^[\da-f]{8}$/;
    my $ca_dir = "$Install_Dir/etc/gx-map/ca-config";

    opendir my $DIR, $ca_dir or die "$ca_dir: $!\n";
    my @files = grep /\.cadesc$/, readdir $DIR;
    closedir $DIR;

    my @matches = ();
    my $matching_filename;
    foreach my $file (@files) {
        my($hash, $short_name, $suffix) = split /\./, $file;
        next if not defined $suffix or $suffix ne 'cadesc';
        next if $hash eq '00000000';
        if ($is_hash and $hash eq $name) {
            push @matches, $name;
            $matching_filename = $file;
        }
        elsif (not $is_hash and lc $short_name eq $name) {
            push @matches, $name;
            $matching_filename = $file;
        }
    }
    if (scalar @matches == 0) {
        die "No matches for CA name $name\n";
    }
    elsif (scalar @matches > 1) {
        die "Multiple matches for CA name ${name}: @matches\n";
    }

    return Gridmap_Utils::Get_CA_Ref "$ca_dir/$matching_filename";
} # Get_CA_Info

# ----------------------------------------------------------------------

#
# Returns a reference to a hash, keyed by serial number, of
# entry references.
# Each entry reference is a reference to a hash of the information
# extracted from the entry.
#
sub Get_Index_Info($) {
    my($filename) = @_;
    my $info = {};

    open FILE, $filename or die "${filename}: $!\n";
    while (<FILE>) {
        chomp;
        next LINE if /^$/;
        my $ref = {};
        my @fields = split /\t/, $_;
        if (scalar @fields != 6) {
            die "$filename, ", scalar @fields, " fields on line $.\n"
        }
        $ref->{line} = $_;
        $ref->{status}   = $fields[0];
        $ref->{expires}  = $fields[1];
        $ref->{revoked}  = $fields[2];
        $ref->{serial}   = $fields[3];
        $ref->{unknown}  = $fields[4];
        $ref->{dn}       = $fields[5];
        $ref->{is_valid} = $ref->{status} eq 'V';

        if ($ref->{dn} =~ m[/(USERID|UID)=([^/]+)]) {
            $ref->{uid} = $2;
            $ref->{email} = "$ref->{uid}\@sdsc.edu";
            if ($ref->{dn} =~ m[/O=(NPACI|SDSC)/OU=(\w+)]) {
                $ref->{ou} = $2;
            }
        }
        $info->{$ref->{serial}} = $ref;
    }
    return $info;
} # Get_Index_Info

# ----------------------------------------------------------------------

sub Request($$$) {
    my ($action, $ref, $comment) = @_;
    my @command = ($gx_request_command);

    if    ($action eq 'add')    { push @command, '-add' }
    elsif ($action eq 'remove') { push @command, '-remove' }
    else                        { die "Internal error, action=$action\n" }
    push @command, '-quiet';
    push @command, '-force';
    push @command, '-dn', $ref->{dn};
    push @command, '-username', $ref->{uid};
    push @command, '-email', $ref->{email};

    my $source = $CA_Name;
    $source =~ s/ /-/g;
    push @command, '-source', $source;

    push @command, '-comment',
                   "$CA_Name certificate # $ref->{serial} ($comment)";

    if ($User_Opt->{dryrun}) {
        my @printable_command = @command;
        foreach (@printable_command) {
            $_ = "\"$_\"" if $_ =~ / /;
        }
        print "% @printable_command\n";
    }
    else {
        system @command;
    }
} # Request

# ----------------------------------------------------------------------

sub Gen_Request($$) {
    my($old_ref, $new_ref) = @_;

    if (defined $old_ref) {
        #
        # If the old and new refs are both valid or both invalid,
        # we don't need to request and update, since the DN and username
        # are guaranteed to be unchanged (we already checked that)
        #
        my $status_change
            = "$old_ref->{status}" . '->' . "$new_ref->{status}";

        if ($old_ref->{is_valid} and not $new_ref->{is_valid}) {
            Request 'remove', $new_ref, $status_change;
        }
        elsif (not $old_ref->{is_valid} and $new_ref->{is_valid}) {
            Request 'add', $new_ref, $status_change;
        }
    }
    else {
        #
        # If the new ref is invalid, don't do anything (perhaps
        # a cert was issued and revoked between checks).
        #
        if ($new_ref->{is_valid}) {
            Request 'add', $new_ref, $new_ref->{status};
        }
    }
} # Gen_Request

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] CA_name
    -help         : Display this message and exit
    -version      : Display version number and exit
    -dryrun       : Don't perform updates
    -debugging    : Enable debugging output
The CA name can be given either as a hexadecimal hash value (such as
"3deda549" or "b89793e4") or as a short name (such as "sdsc" or "npaci")
EOF
    exit 1;
} # Usage
