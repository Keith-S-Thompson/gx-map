#!/usr/bin/perl -w

# $Id: configure-gx-map,v 1.69 2007-07-05 19:34:40-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/configure-gx-map,v $

# This script should be executed from the base source directory of the
# gx-map package.  If you don't have a Perl executable in /usr/bin/perl,
# just run it as "perl ./configure-gx-map config-file".

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

use File::Basename ();
use Getopt::Long ();

sub Option_Name($);
sub Get_Config_From_File($);
sub Write_Config_File();
sub Same_Directory($$);
sub Need_File($);
sub Home_Dir($);
sub Command_Exists($$);
sub Get_Version();
sub Check_Admin($);
sub Pod2Man_Command();
sub Make_Man_Pages();
sub Debug(@);
sub Usage(@);

my %Is_TGCDB_File = ( 'gx-db-check-requests.in' => 1,
                      'gx-db-request.in'        => 1,
                      'gx-db-dump.in'           => 1 );

my $Program_Name = File::Basename::basename $0;

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( help
                 version
                 perl=s
                 path=s
                 namespace=s
                 install-dir|prefix=s
                 data-dir=s
                 request-log-permissions=s
                 gx-map-owner=s
                 additional-admins=s
                 admin-email=s
                 require-signatures!
                 certificates-dir=s
                 gx-propagate=s
                 extras=s
                 teragrid
                 debugging ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
Usage if scalar @ARGV > 1;
my $Config_File = undef;
if (scalar @ARGV == 1) {
    $Config_File = $ARGV[0];
}

$| = 1 if $User_Opt->{debugging};

my $version = Get_Version;

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $version\n";
    exit 0;
}

my @Var_Names
    = qw( PERL
          PATH
          NAMESPACE
          INSTALL_DIR
          DATA_DIR
          REQUESTS_LOG_PERMISSIONS
          GX_MAP_OWNER
          ADDITIONAL_ADMINS
          ADMIN_EMAIL
          REQUIRE_SIGNATURES
          CERTIFICATES_DIR
          GX_PROPAGATE
          EXTRAS );
my %Valid_Var_Name = map { $_ => 1 } @Var_Names;
my %May_Be_Empty
    = map { $_ => 1 }
          qw( ADDITIONAL_ADMINS
              GX_PROPAGATE
              CERTIFICATES_DIR
              EXTRAS );
my %Immutable
    = map { $_ => 1 }
          qw( PERL
              NAMESPACE
              INSTALL_DIR
              DATA_DIR
              REQUESTS_LOG_PERMISSIONS
              GX_MAP_OWNER
              GX_PROPAGATE
              EXTRAS );

my $Config = {};
my @errors = ();

#
# First, get values from config file, if any.
#
if (defined $Config_File) {
    Debug "Calling Get_Config_From_File \"$Config_File\"\n";
    $Config = Get_Config_From_File $Config_File;
    if ($User_Opt->{debugging}) {
        Debug "After Get_Config_From_File:\n";
        foreach my $key (sort keys %$Config) {
            Debug "    $key => \"$Config->{$key}\"\n";
        }
    }
}

#
# Then get values from command-line options.
#
Debug "Checking command-line arguments\n";
foreach my $name (@Var_Names) {
    my $option = Option_Name $name;
    Debug "\$name = $name, \$option = $option\n";
    if (defined $User_Opt->{$option}) {
        Debug "Setting \$Config->{$name} to \$User_Opt->{$option} = \"$User_Opt->{$option}\"\n";
        $Config->{$name} = $User_Opt->{$option};
    }
}
Debug "Done checking command-line arguments\n";

my $Prereq_Error = undef;
my $Pod2Man_Error = undef;

#
# Apply defaults, check for validity.
#

#
# PERL defaults to '/usr/bin/perl'
#
if (not defined $Config->{PERL}) {
    if (-x '/usr/bin/perl') {
        $Config->{PERL} = '/usr/bin/perl';
    }
}
if (not defined $Config->{PERL}) {
    push @errors, "PERL is not defined\n";
}
elsif (not -e $Config->{PERL}) {
    push @errors, "PERL ($Config->{PERL}) does not exist\n";
}
elsif (not -x $Config->{PERL}) {
    push @errors, "PERL ($Config->{PERL}) is not executable\n";
}

#
# PATH defaults to '/bin:/usr/bin' *or* to '/usr/bin'
#
if (not defined $Config->{PATH}) {
    if (Same_Directory '/bin/', '/usr/bin') {
        $Config->{PATH} = '/usr/bin';
    }
    else {
        $Config->{PATH} = '/bin:/usr/bin';
    }
}
foreach my $dir (split /:/, $Config->{PATH}) {
    if ($dir !~ /^\// or not -d $dir) {
        push @errors, "Bad directory \"$dir\" in PATH\n";
    }
}

#
# NAMESPACE has no default, and must be specified.
#
if (defined $Config->{NAMESPACE}) {
    if ($Config->{NAMESPACE} !~ /^[\w_.-]+$/) {
        push @errors, "Bad value for NAMESPACE\n";
    }
}
else {
    push @errors, "No value specified for NAMESPACE\n";
}

#
# INSTALL_DIR has no default, and must be specified.
#
if (defined $Config->{INSTALL_DIR}) {
    if ($Config->{INSTALL_DIR} !~ /^\//) {
        push @errors, "Bad value for INSTALL_DIR (prefix)\n";
    }
}
else {
    push @errors, "No value specified for INSTALL_DIR (prefix)\n";
}

#
# DATA_DIR defaults to INSTALL_DIR with "-data" appended.
#
if (defined $Config->{DATA_DIR}) {
    if ($Config->{INSTALL_DIR} !~ /^\//) {
        push @errors, "Bad value for INSTALL_DIR (prefix)\n";
    }
}
else {
    if (defined $Config->{INSTALL_DIR}) {
        $Config->{DATA_DIR} = $Config->{INSTALL_DIR} . '-data';
    }
    else {
        # Don't bother with an error message; we've already complained
        # that INSTALL_DIR isn't defined.
    }
}
if (defined $Config->{INSTALL_DIR} and
    defined $Config->{DATA_DIR} and
    $Config->{INSTALL_DIR} eq $Config->{DATA_DIR})
{
    push @errors, "INSTALL_DIR (prefix) and DATA_DIR may not be the same\n";
}

#
# REQUESTS_LOG_PERMISSIONS defaults to 444.
# Permitted values are 400, 440, 444
#
if (defined $Config->{REQUESTS_LOG_PERMISSIONS}) {
    my %permission_ok = map { $_ => 1 } qw(400 440 444);
    if (not $permission_ok{$Config->{REQUESTS_LOG_PERMISSIONS}}) {
        push @errors, "Bad REQUESTS_LOG_PERMISSIONS (use 400, 440, or 444)\n";
    }
}
else {
    $Config->{REQUESTS_LOG_PERMISSIONS} = '444';
}

#
# GX_MAP_OWNER, if specified, must be the name of the user
# running this script.
#
my $owner = (getpwuid $<)[0];
if (defined $Config->{GX_MAP_OWNER}) {
    if ($Config->{GX_MAP_OWNER} ne $owner) {
        push @errors, "Bad value for GX_MAP_OWNER, must be \"$owner\"\n";
    }
}
else {
    $Config->{GX_MAP_OWNER} = $owner;
}

#
# ADDITIONAL_ADMINS defaults to the empty string.
# If specified, it must be a whitespace-separated list of user names.
#
if (defined $Config->{ADDITIONAL_ADMINS}) {
    my @accts = split /\s+/, $Config->{ADDITIONAL_ADMINS};
    foreach my $acct (@accts) {
        my @pw = getpwnam $acct;
        if (not @pw) {
            push @errors,
                 "ADDITIONAL_ADMINS, no user \"$acct\"\n";
        }
        elsif ($pw[2] eq 0) {
            push @errors,
                 "ADDITIONAL_ADMINS, user \"$acct\" has UID 0, not allowed\n";
        }
    }
}
else {
    $Config->{ADDITIONAL_ADMINS} = '';
}

#
# ADMIN_EMAIL has no default.  It must be a valid e-mail address.
#
if (defined $Config->{ADMIN_EMAIL}) {
    if ($Config->{ADMIN_EMAIL} !~ /^[^@]+@[^@]+\.[^@]+$/) {
        push @errors, "Bad ADMIN_EMAIL $Config->{ADMIN_EMAIL}\n";
    }
}
else {
    push @errors, "No value specified for ADMIN_EMAIL (you can change it later)\n";
}

#
# REQUIRE_SIGNATURES defaults to 'yes'.
# The value must be either 'yes' or 'no'.
#
if (defined $Config->{REQUIRE_SIGNATURES}) {
    if ($Config->{REQUIRE_SIGNATURES} ne 'yes' and
        $Config->{REQUIRE_SIGNATURES} ne 'no')
    {
        push @errors, "Bad value for REQUIRE_SIGNATURES, must be yes or no\n"
    }
}
else {
    $Config->{REQUIRE_SIGNATURES} = 'yes';
}

#
# CERTIFICATES_DIR defaults to '/etc/grid-security/certificates'.
#
if (defined $Config->{CERTIFICATES_DIR}) {
    if ($Config->{CERTIFICATES_DIR} !~ /^\//) {
        push @errors, "Bad value for CERTIFICATES_DIR\n"
    }
}
else {
    $Config->{CERTIFICATES_DIR} = '/etc/grid-security/certificates';
}

#
# GX_PROPAGATE defaults to the empty string.
#
# TODO: Allow values other than 'gx-propagate.in.teragrid' and
# 'gx-propagate.in.test'.
#
if (defined $Config->{GX_PROPAGATE}) {
    my %ok = map { $_ => 1 }
                 ( '',
                   'gx-propagate.in.teragrid',
                   'gx-propagate.in.test' );
    if (not $ok{$Config->{GX_PROPAGATE}}) {
        push @errors, "Bad value for GX_PROPAGATE\n";
    }
}
else {
    $Config->{GX_PROPAGATE} = '';
}

#
# EXTRAS defaults to the empty string.
# The only other allowed value is 'TGCDB'.
#
if (defined $Config->{EXTRAS}) {
    my %ok = map { $_ => 1 }
                 ( '', 'TGCDB' );
    if (not $ok{$Config->{EXTRAS}}) {
        push @errors, "Bad value for EXTRAS\n";
    }
}
else {
    $Config->{EXTRAS} = '';
}

die @errors if @errors;

foreach my $var (@Var_Names) {
    next if $May_Be_Empty{$var};
    if (not defined $Config->{$var} or $Config->{$var} eq '') {
        $Config->{$var} = 'UNDEFINED';
    }
}

Write_Config_File();

#
# Check prerequisites
#
print "Checking prerequisites... \n";
if (-x 'gx-check-prereqs') {
    my @command = ( $Config->{PERL},
                    './gx-check-prereqs',
                    '-path', $Config->{PATH} );
    if ($Config->{GX_PROPAGATE} =~ /teragrid/i) {
        push @command, '-teragrid';
    }
    print "% @command\n";
    my $result = system @command;
    if ($result != 0) {
        $Prereq_Error = "gx-check-prereqs failed";
    }
}
else {
    $Prereq_Error = "Can't find gx-check-prereqs command";
}

my @in_files = ();
my %out_file = ();

opendir DIR, '.' or die ".: $!\n";
foreach my $in_file (sort grep /\.in$/, readdir DIR) {
    next if $in_file eq 'gx-map.conf.in';
    if (Need_File $in_file) {
        push @in_files, $in_file;
        ($out_file{$in_file} = $in_file) =~ s/\.in$//;
    }
}
closedir DIR;

if ($Config->{GX_PROPAGATE} ne '') {
    push @in_files, $Config->{GX_PROPAGATE};
    $out_file{$Config->{GX_PROPAGATE}} = 'gx-propagate';
}

die "No *.in files found\n" if not @in_files;

my $max_len = 0;
foreach my $in_file (@in_files) {
    $max_len = length $in_file if length $in_file > $max_len;
}

foreach my $in_file (@in_files) {
    my $out_file = $out_file{$in_file};
    printf "%-${max_len}s --> %s\n", $in_file, $out_file;
    open IN, $in_file or die "$in_file: $!\n";
    open OUT, ">$out_file" or die "$out_file: $!\n";
    while (<IN>) {
        foreach my $var (@Var_Names) {
            s/%$var%/$Config->{$var}/g;
        }
        if (/%[A-Za-z_]\w+%/) {
            warn ">>> Unrecognized variable $&, $in_file line $.\n";
        }
        print OUT;
    }
    close IN;
    close OUT;

    my $mode = (stat $in_file)[2];
    chmod $mode, $out_file;
}

Make_Man_Pages;

if (defined $Prereq_Error) {
    warn ">>> $Prereq_Error, proceed with caution\n";
}

if (defined $Pod2Man_Error) {
    warn ">>> pod2man command not found, man pages will not be installed\n";
}

########################################################################

#
# Map a configuration variable name (such as "INSTALL_DIR") to the
# corresponding command-line option name (such as "install-dir").
#
sub Option_Name($) {
    my($name) = @_;
    $name = lc $name;
    $name =~ s/_/-/g;
    return $name;
} # Option_Name

# ----------------------------------------------------------------------

sub Get_Config_From_File($) {
    my($Config_File) = @_;
    my @errors = ();
    my @warnings = ();
    my $Config = {};

    open my $CONFIG, '<', $Config_File or die "$Config_File: $!\n";
    while (<$CONFIG>) {
        s/#.*$//;
        s/^\s+//;
        s/\s+$//;
        next if /^$/;

        chomp;

        if (/^(\w+)\s+(.*)$/) {
            my($name, $value) = ($1, $2, $3);
            eval { $value =~ s/~([\w.-]+)/Home_Dir $1/eg; };
            if ($@) {
                chomp $@;
                push @errors, "$@, $Config_File line $.\n";
            }
            $value =~ s/%VERSION%/$version/g;
            if ($Valid_Var_Name{$name}) {
                if (exists $Config->{$name}) {
                    push @errors,
                         "Duplicate name \"$name\", $Config_File line $.\n";
                }
                else {
                    $Config->{$name} = $value;
                }
            }
            else {
                push @errors, "Invalid name \"$name\", $Config_File line $.\n";
            }
        }
        elsif (/^(\w+)$/) {
            my($name) = ($1, $2);
            $Config->{$name} = '';
            if (not $May_Be_Empty{$name}) {
                push @errors, "$Config_File: $name requires non-empty value\n";
            }
        }
    }
    close $CONFIG;
    #
    # TODO: @errors? @warnings?
    #
    return $Config;
} # Get_Config_From_File

# ----------------------------------------------------------------------

sub Write_Config_File() {
    my $in_file  = 'gx-map.conf.in';
    my $out_file = 'gx-map.conf';
    Debug "Reading from $in_file, writing to $out_file\n";
    open my $IN,  '<', $in_file  or die "$in_file: $!\n";
    open my $OUT, '>', $out_file or die "$out_file: $!\n";
    while (<$IN>) {
        if (/^(\w+)\s*$/) {
            my $name = $1;
            Debug "Line $., \$name = \"$name\"\n";
            my $out_line
                = sprintf "%-25s %s", $name, $Config->{$name};
            if ($Immutable{$name}) {
                $out_line .= '  # DO NOT MODIFY THIS LINE';
            }
            Debug "Printing to $out_file: \"$out_line\"\n";
            print $OUT "$out_line\n";
        }
        else {
            print $OUT $_;
        }
    }
    close $IN  or die "$in_file: $!\n";
    close $OUT or die "$out_file: $!\n";

    if ($User_Opt->{debugging}) {
        Debug "Current directory:\n";
        system 'pwd';
        system 'ls', '-AlsGF', '--time-style=+%Y-%m-%d %T', $in_file, $out_file;
        print ">>> $in_file (decommented):\n";
        system 'decomment', $in_file;
        print ">>> $out_file (decommented):\n";
        system 'decomment', $out_file;
        print ">>> end\n";
    }
} # Write_Config_File

# ----------------------------------------------------------------------

#
# Returns true if the two arguments refer to the same directory.
# If they have the same device and inode numbers (the first two
# fields of the list returned by stat(), they're the same.
#
sub Same_Directory($$) {
    my($dir_a, $dir_b) = @_;
    my @stat_a = stat $dir_a;
    my @stat_b = stat $dir_b;
    return ( scalar @stat_a >= 2 and
             scalar @stat_b >= 2 and
             $stat_a[0] == $stat_b[0] and
             $stat_a[1] == $stat_b[1] );
} # Same_Directory

# ----------------------------------------------------------------------

sub Need_File($) {
    my($file) = @_;
    if ($Is_TGCDB_File{$file}) {
        return $Config->{EXTRAS} eq 'TGCDB';
    }
    else {
        return 1;
    }
} # Need_File

# ----------------------------------------------------------------------

my %home_dir = ();

sub Home_Dir($) {
    my($user) = @_;
    if (not exists $home_dir{$user}) {
        my @pw = getpwnam $user;
        if (@pw) {
            $home_dir{$user} = $pw[7];
        }
        else {
            $home_dir{$user} = undef;
        }
    }
    if (defined $home_dir{$user}) {
        return $home_dir{$user};
    }
    else {
        die "No such user \"$user\"\n";
    }
} # Home_Dir

# ----------------------------------------------------------------------

sub Command_Exists($$) {
    my ($command, $path) = @_;
    foreach my $dir (split /:/, $path) {
        if (-x "$dir/$command") {
            return 1;
        }
    }
    return 0;
} # Command_Exists

# ----------------------------------------------------------------------

sub Get_Version() {
    my $result;
    my $module = 'GX.pm.in';
    open my $MODULE, $module or die "${module}: $!\n";
    while (<$MODULE>) {
        if (/\$VERSION\s*=\s*'(.*)'/) {
            $result = $1;
            last;
        }
    }
    close $MODULE;
    if (defined $result) {
        return $result;
    }
    else {
        die "Can't get version number from $module\n";
    }
} # Get_Version

# ----------------------------------------------------------------------

sub Check_Admin($) {
    my($acct) = @_;
    my @pw = getpwnam $acct;
    if (not @pw) {
        push @errors,
             "$Config_File: No user \"$acct\"\n";
    }
    elsif ($pw[2] eq 0) {
        push @errors,
             "$Config_File: User \"$acct\" has UID 0, not allowed\n";
    }
} # Check_Admin

# ----------------------------------------------------------------------

sub Pod2Man_Command() {
    my %checked = ();

    my $perl_command = $Config->{PERL};
    while (defined $perl_command and -l $perl_command) {
        my $dir = File::Basename::dirname $perl_command;
        $perl_command = readlink $perl_command;
        if ($perl_command !~ /^\//) {
            $perl_command = "$dir/$perl_command";
        }
    }

    my @dirs = ();
    if (defined $perl_command) {
        push @dirs, File::Basename::dirname $perl_command;
    }
    push @dirs, split(/:/, $Config->{PATH});
    push @dirs, split(/:/, $ENV{PATH});

    DIR:
    foreach my $dir (@dirs) {
        next DIR if $checked{$dir}++;
        if (-x "$dir/pod2man") {
            return "$dir/pod2man";
        }
    }
    return undef;
} # Pod2Man_Command

# ----------------------------------------------------------------------

sub Make_Man_Pages() {
    my %center = ( 1 => 'User Commands',
                   3 => 'Functions',
                   5 => 'File Formats',
                   7 => 'Miscellaneous Information',
                   8 => 'Administrative Commands' );

    opendir my $Doc, 'doc' or die "doc: $!\n";
    my @pods = grep /\.pod$/, sort readdir $Doc;
    closedir $Doc;

    my $pod2man = Pod2Man_Command();
    if (not defined $pod2man) {
        $Pod2Man_Error = 1;
        return;
    }
    print "Using $pod2man ...\n";
    my $max_len = 0;
    foreach my $pod (@pods) {
        $max_len = length "doc/$pod" if length "doc/$pod" > $max_len;
    }
    foreach my $pod (@pods) {
        if ($pod =~ /^(.*)\.(\d)\.pod$/) {
            my($name, $section) = ($1, $2);
            my $man_page = "$name.$section";
            my @command = ( $pod2man,
                            '--section', $section,
                            '--release', "'gx-map $version'",
                            '--center', "'$center{$section}'",
                            '--name', $name,
                            "doc/$pod" );
            printf "%-${max_len}s --> %s\n", "doc/$pod", "doc/$man_page";
            system "@command > doc/$man_page";
        }
    }
} # Make_Man_Pages

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name options [filename]
    -help               Display this message and exit.
    -version            Display the gx-map version number and exit.
    -perl               Location of the Perl executable.
                        Default is "/usr/bin/perl".
    -path               Value for \$PATH
                        Default is "/usr/bin:/bin", or just "/usr/bin"
                        if they're the same directory.
    -namespace          Namespace for this installation.
                        Required.
    -install-dir        Installation directory; required.
                        The string "%VERSION" is replaced with the gx-map
                        version number.
    -prefix             A synonym for "-install-dir".
    -data-dir           Data directory.
                        The string "%VERSION" is replaced with the gx-map
                        version number.
                        Default is installation directory with "-data"
                        appended.
    -request-log-permissions
                        Octal permissions for requests.log file.
                        Permitted values are 444, 440, 400.
                        Default is 444.
    -gx-map-owner       Owner of the gx-map installation.
                        This option is included here only for completeness;
                        if specified, it must be the user running this
                        command.
    -additional-admins  A list of one or more additional administrative
                        accounts, separated by commas or spaces.
                        Default is empty.  Recommendation: Don't set this.
    -admin-email        An e-mail address for notifications of significant
                        events.
    -[no]require-signatures 
                        Specify whether non-admin request must be
                        cryptographically signed.
    -certificates-dir   If signatures are required, specify 
                        the directory containing CA certificates.
                        Default is "/etc/grid-security/certifiates".
    -gx-propagate       Name of a file implementing the gx-propagate
                        command.  If not a full pathname, use
                        a file in the source distribution,
                        either "gx-propagate.in.test" or
                        "gx-propagate.in.teragrid".  By default,
                        the gx-propagate command is not installed.
    -extras             A list of extra components to be installed.
                        The only currently supported value is TGCDB.
    -teragrid           Equivalent to
                        "-gx-propagate gx-propagate.in.teragrid -extras TGCDB"
    -debugging          Enable debugging output.

A filename argument, if present, is taken to be an existing
configuration file specifying configuration information.  Unrecognized
variables in the file are ignored; command-line options (see above)
override variables specified in the file.  This can be used to import
configuration information from an existing gx-map installation, possibly
an earlier version.
EOF
    exit 1;
} # Usage
