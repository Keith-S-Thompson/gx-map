# $Id: bug-0064,v 1.17 2007-10-14 21:23:03-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/bugs/bug-0064,v $

gx-map bug 0064
Date: Fri 2006-01-20
Severity: High
Reported by: Keith Thompson <kst@sdsc.edu>
Version: 0.5.0d0
Status: Open
Title: Feature: Require user to prove he owns a certificate

Summary:
Currently, the gx-map system allows a user to map any arbitrary DN to
his own Unix account name.  This isn't necessarily a security hole
as long as a user can't map his own DN to someone else's account,
but it could cause some problems.  For one, a user could map someone
else's DN to his own account; this could deny the victim access
to his own account (while simultaneously giving the victim access
to the attacker's account, so it's not a very effective attack).
For another, it could create security problems for any software that
treats the grid-mapfile as a mapping from user names to DNs, rather
than just DNs to user names (which *shouldn't* be done).  Finally,
it introduces the possibility of typos.

Consider requiring the user running gx-request to prove that he
owns, or at least can use, the certificate with the requested DN.
For example, require the user to specify a certificate file (or use
the default $HOME/.globus/usercert.pem) and prompt for its passphrase.

Make it an install-time configuration option.

Since gx-request is not privileged, validation is non-trivial.
Presumably, once the user enters a passphrase, gx-request could use the
user's certificate to cryptographically sign a file, storing the signed
file along with a copy of the certificate (*not* the private key)
in the request file.  gx-check-requests could then confirm that the
file in the request was actually signed by the certificate, and that
the certificate was signed by a recognized CA (so the system on which
gx-check-requests runs has to have its /etc/grid-security/certificates
directory set up properly).

A gx-map administrator could still request mappings without
confirming the certificate, as is done currently.  I might also
consider requiring an administrator to sign any requests, using a
configured DN.  For automated use, the certificate would have to have
no passphrase, and the private key would have to be carefully guarded;
perhaps this could be restricted to a secure server.  Possibly this
could be another install-time configuration option.

Obviously this requires more thought and work.

More thoughts:

I think the way to do this is to have the user sign the request
file itself.  I had been thinking of signing a copy of /dev/null
(we'd care about the signature, not the contents), but a link to an
external signed file is too dangerous; someone might forge a request
file that points to somebody else's signed file.

To sign a file, including a copy of the user certificate in the
signed file:

    openssl smime -sign \
                  -text \
                  -in FILE \
                  -out FILE.signed \
                  -signer $HOME/.globus/usercert.pem \
                  -inkey $HOME/.globus/userkey.pem

This will prompt for the user's passphrase.

Note that this is intended for e-mail, and seems to assume that
the input file is text (fortunately, a request file is plain text).
It adds '\r' characters, so we have to make sure we allow for that.

To verify a signature:

    openssl smime -verify \
                  -text \
                  -in FILE.signed \
		  -out FILE.recovered \
                  -CApath /etc/grid-security/certificates

To extract the signer's DN (this does *not* verify the signature):

    openssl smime -pk7out -in motd.signed | \
    openssl pkcs7 -print_certs -noout

So gx-request will have to deal with both signed and unsigned request
files.  Use a naming convention to distinguish between them, and (if
configured) don't accept unsigned requests from non-administrators.
For unsigned requests, everything works as it does not.  For signed
requests, the signed request itself is moved to the good-requests
(or bad-requests) directory, but only information from the contained
request is appended to requests.log -- along with a new attribute
indicating that the signature was verified.

This could be broken if someone is able to introduce a hacked copy
of openssl, which makes it very important for the specified PATH to
be secure.  Emphasize this in the documentation, and in sample.conf.
(gx-map currently uses openssl, but not in any security-critical
manner.)

Another thought:

A user should *not* be required to prove he owns the certificate for a
"remove" or "remove-user" request.  (A "remove-dn" request requires
administrative privileges.)  If somebody has somehow managed to map
his own DN to my account, I should be able to remove that mapping
(obviously I can't prove I own the certificate in that case).

Sun 2006-11-05
Raised priority to High; planning to add this in the next release
after 0.5.3.

Yet another thought:

How do we handle requests made before this feature was implemented?
Probably make it yet another configuration option (or perhaps a value
"STRICT" for a single option?).  Each new request has a new attribute,
indicating whether it's been signed and verified.  In strict mode,
any unsigned user "add" request will be rejected.  In a looser mode,
records for which this attribute is missing (i.e., old requests from
before signing was implemented) are accepted.

    Tue 2007-01-23
    A simpler but less flexible approach is to handle this in
    gx-convert-log.  The next version of gx-map will have new request
    attributes, so gx-convert log will be necessary for an upgrade
    anyway.  Add a command-line option to specify whether unverified
    requests in the input log will be marked as verified or not.
    (Note that admin requests do not require verification.)

Thu 2007-01-11
In the summary above, I wrote that mapping someone else's DN to
your own account isn't a very effective attack.  In fact, it can be.
In the following scenario, I'm the attacker and you're the victim.

Suppose I map your DN to my account on some resource.  You try to
login to the resource using gsi-ssh, and you're logged in under
my account.  In my .profile or other init script, I grab a copy of
your delegated proxy, which I can then use to access your account.
I also print a bogus error message and log out, making you think you
were simply unable to login to the system.  There will be a record of
the mapping in the gx-map requests.log file, but that might not be
detected in time -- and it's possible that the attacker is not me,
but someone else who has previously broken into my account (by this
or some other technique).  So allowing users to map arbitrary DNs
to their own accounts could be a serious security hole.  (It can
be alleviated somewhat if gsi-ssh users habitually use "user@site"
rather than just "site".)

Abe Singer has pointed out a problem with the approach of having
gx-request sign the request file using the user's certificate.
It requires the user{cert,key}.pem files to be available on the system
where the user runs gx-request; it also requires the user to type
his passphrase on that system.  This can defeat the purpose of proxy
delegation; the user should be able to store his user{cert,key}.pem
on a single system (possibly one with no gx-map installation) and
use proxies for access to any other systems.  Requiring the user to
copy his userkey.pem to a production system and enter the passphrase
there could be a security problem.  A number of users have their
user{cert,key}.pem files on production systems anyway, and at least
SDSC has gx-map installed on workstations, so this is still a useful
capability, but it shouldn't be the only option.

Another possibility is to use a proxy rather than a certificate and
key.  Proxies are routinely delegated from system to system anyway,
but using them presents some more problems.  For one thing, it's still
potentially inconvenient for users.  If I'm able to run grid-proxy-init
on the system, it's more convenient to use the proxy than to re-enter
the passphrase for the certificate.  But if I don't have copies of
my user{cert,key}.pem files on the system, then I can't delegated a
proxy to the system unless I already have an entry in the grid-mapfile.

The alternative is to run grid-proxy-init on my "home" system, then
manually copy the proxy file /tmp/x509up_uNNNN to the production
system, and give gx-request the name of the copy of the proxy.
You have to make sure that the permissions on the proxy are preserved
when you copy it (ssh does this by default, so it shouldn't be much
of a problem); if the proxy becomes group- or world-readable somehow,
gx-request can warn about it, but it could be too late by then.

Verifying a file signed with a proxy turns out to be complex.
A proxy consists of two or more parts: the proxy certificate, the
unencrypted proxy private key, and zero or more signing certificates;
these constitute the chain up to, and possibly including, the CA
certificate.  The possible presence of the CA certificate means we
need to be careful about validation; a malicious user could include
a bogus self-signed CA certificate in a proxy. One solution is:

    1. Create a temporary certificates directory, including only
       certificates extracted from the proxy, but *excluding*
       any whose subject names match certificates already
       in /etc/grid-security/certificates (more generally
       CERTIFICATES_DIR).  (Consider caching the list of subject
       names.)

    2. Attempt to verify the signed file.  This verification should
       fail.

    3. Install (via symlinks) all the *.0 files from
       /etc/grid-security/certificates.

    4. Try again to verify the signed file.  This time it should
       succeed.

This demonstrates that the signature can be verified *and* that the
verification depends on /etc/grid-security/certificates.

Wed 2007-02-07

    I don't think the double verification described above is necessary,
    as long as we don't install any user-provided self-signed
    certificates into the temporary trusted certificates directory.

    Here's the algorithm:

    1. Create a temporary certificates directory.  Populate it with
       symlinks to /etc/grid-security/certificates/*.0.

    2. Disassemble the multifile, which will consist of the signed
       request and zero or more certificate files.  For each
       certificate file:

          Pass it to Certificate_Info().  The fields of interest are
          hash, issuer, and subject.

          If "<hash>.0" is already in the certificates directory,
          ignore the certificate.

          If the certificate is self-signed (issuer eq subject),
          ignore the certificate.

    3. Attempt to verify the signed request file.

    Verification requires a full certificate chain, going all the way
    back to a trusted self-signed certificate.  The signed request
    file is bogus if and only if that self-signed certificate is
    not in /etc/grid-security/certificates.  If the bogus root CA
    certificate is in the multifile, it will be ignored; if it's not,
    it will be missing.  Either way, the verification will fail,
    which is exactly what we want.

    Sun 2007-03-18
        We definitely need to ignore any self-signed certificates in a
        proxy (so a user can't create and use a bogus CA certificate),
        but that's not quite adequate.  We should also ignore all CA
        certificates, self-signed or not.

        Suppose an organization provides a self-signed root CA and two
        subsidiary CAs, and you want to accept the root and *only one*
        of the subsidiary CAs.  Then we want to prevent a user from
        adding a grid-mapfile entry for a certificate issued by the
        other subsidiary CA.

        To do this, we need to look at the "X509v3 extensions:"
        of the certificate.  For a CA certificate, it should look
        something like this:

        X509v3 extensions:
            X509v3 Basic Constraints: critical
                CA:TRUE

        (See my cert-extensions command.)

        *However*, there are a few CAs that don't have this extension
        (and two of them happen to be recognized by TeraGrid), namely:

        2ca73e82 # USC PKI Lite CA (usc-pki-lite-r1)
        5f54f417 # Grid Canada CA (old) (grid-canada-old)
        b57985f0 # USC Kerberos Certification Authority v3 (usc-kerberos-v3)

    Tue 2007-03-20
        No, just checking the CA:TRUE attribute doesn't help.
        A malicious user could easily create a proxy with a complete
        chain, including a self-signed certificate *without*
        the CA:TRUE attribute.  If gx-check-requests only ignored
        certificates with CA:TRUE, it would accept such a bogus proxy.

        Instead, just ignore any sef-signed certificate in a proxy.
        Better, reject any proxy (or user certificate!) that contains
        a self-signed certificate; a legitimate proxy will never
        include a self-signed certificate.

        It would also be possible to reject CA:TRUE certificates;
        this would prevent a determined user from creating a mapping
        for a certificate signed by an unaccepted CA that's signed
        by an accepted root CA certificate, but it's probably not
        worth the effort.  K.I.S.S.

    Fri 2007-08-31
        No, we can't reject self-signed or CA certificates; we just
        need to ignore them.  A proxy issued by the NCSA MyProxy
        CA (hash f2e89fe3) includes a copy of the CA certificate.
        Furthermore, the proxy is a "limited legacy globus proxy",
        and I'm having trouble verifying file signed by such a proxy;
        I get "unable to get local issuer certificate".

Another possibility is to simplify things (at least for now) by
accepting only user certificates, not proxies, and allowing only a
single certificate to be included.  But user certificates present
the same problem; a malicious user could generate a bogus self-signed
certificate and use it to sign the request.  We still need to confirm
that the signature is verified and that the verification depends on
the /etc/grid-security/certificates.  A user certificate is really
just a special case of a proxy.

Note that we *never* save a copy of the unencrypted private key from
a proxy.

Leaving aside the private key and additional certificates, there are
(at least) four kinds of proxy certificates, distinguished by the
presence of "critical extension" fields.  An old-style "legacy"
proxy, generated by Globus 2.4.3 and earlier, has no extensions.
A pre-RFC proxy, generated by Globus 2.4.3 with the "-new" option or
by GT4 by default, has an extension field that is not recognized by
any version of OpenSSL.  An RFC proxy has an extension recognized by
OpenSSL starting with version 0.9.7g (Globus 4.0.1 includes OpenSSL
0.9.7d).  Finally, a proxy issued by a KCA (such as PSC or USC) has
several critical extension fields, some of which are not recognized
by OpenSSL, but it has no copy of the user certificate; instead,
the proxy certificate itself is signed by the CA.

The critical extension fields could present some problems.  In releases
of OpenSSL prior to 0.9.7, these fields are quietly ignored.
In release 0.9.8 and later, the presence of these fields prevents a
signature from being verified by default, but this can be overridden
by using "smime -verify -ignore_critical".  (Correction: this is
done by setting the environment variable $OPENSSL_ALLOW_PROXY_CERTS.)
In the 0.9.7 series (0.9.7 and 0.9.7a through 0.9.7l), the critical
fields in a pre-RFC proxy prevent a signature from being verified,
and there is no "-ignore_critical" option.  (There is such an option
to "openssl verify", but that's used for verifying certificates, not
signatures.)  (The critical extension in an RFC proxy is recognized
starting in OpenSSL 0.9.7g.)

Proposal:

Implement the new REQUIRE_SIGNATURES configuration option more or
less as already specified.  Allow verification using either a user
certificate and key *or* using a proxy; by default, look for a proxy,
then for a certificate.  Since in the current version of Globus
grid-proxy-init generates pre-RFC proxies by default, sites should
be strongly encouraged to install a version of OpenSSL that can
handle them (the latest is 0.9.8d).  (An older version of OpenSSL,
0.9.6m or older, should also work, but that's not recommended.
Versions older than 0.9.5 will not work, since they don't support
"openssl smime".)  This needn't be installed as the default OpenSSL
for the system; it just needs to be in the specified PATH for gx-map.
If that's not possible, then users may have to run "grid-proxy-init
-old" to generate an old-style proxy, or use their user certificates.

Better idea:

Don't make it optional.  Drop the REQUIRE_SIGNATURES configuration
option.  The CERTIFICATES_DIR option is mandatory.
