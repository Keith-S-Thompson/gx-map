# $Id: bug-0030,v 1.3 2005-06-24 12:19:03-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/bugs/bug-0030,v $

gx-map bug 0030
Date: Thu 2005-06-23
Severity: High
Reported by: Keith Thompson <kst@sdsc.edu>
Version: 0.4.5
Status: Open
Title: Cross-site propagation

Summary:
gx-map currently has only weak support for cross-site information
propagation.  On TeraGrid, for example, a user needs to run the gx-map
client on each system; this is unwieldy, particularly, if the user
can't login to the system until the grid-mapfile entry is in place.

Proposed solution:
This is somewhat TeraGrid-specific, but I'll try to keep it fairly
generic.

In gx-request (formerly gx-map):
    Add a new request type, "replace".
    It's similar to "add", with the following differences:

	It removes all previous mappings for the same user.
	It accepts zero or more "-dn" arguments, each of which is added.

    This is equivalent to a "remove-user" followed by zero or
    more "add"s.  This corresponds to the information in an AMIE
    "request_user_modify" packet.

    Note that the request is not actually split into a "remove-user"
    and multiple "add"s; it remains in the requests.log file as a
    single "replace" request.  (I think.)

    NOTE: I need to figure out whether this should remove all mappings
    for the user, or just mappings with the same SOURCE attribute.
    I *think* it should remove all of them -- but this risks clobbering
    information from the local gx-map requests.log that hasn't yet
    been propagated to the TGCDB.

    Currently, a "remove-user" is potentially inefficient, since
    it has to do a full scan of the %Mappings data structure in
    gx-gen-mapfile.  If there are a large number of "remove-user"
    entries in the requests.log, gx-gen-mapfile could approach O(N**2)
    complexity.  Create an internal hash, indexed by user names,
    to make searching for mappings for a given user more efficient.

In gx-check-requests:
    Optionally invoke sbin/gx-propagate-dn.  This is not installed
    by default.  Provide a TG-specific implementation that talks
    to the TGCDB, and an install-time parameter to install it as
    sbin/gx-propagate-dn.  This is basically a plug-in.

    This will be invoked by gx-check-requests for each new request
    it sees.  It will *not* be invoked for requests with source=AMIE
    (or whatever I decide to call it).

More thoughts:

I've been assuming that the TGCDB will know about all the mappings for
all TG sites.  This implies that a "replace" request can delete *all*
the mappings for the specified user before adding the listed ones.
(This all takes place within the %Mappings data structure as
gx-gen-mapfile is running.)

This implies that, before a site starts processing AMIE packets using
"gx-request -replace", it needs to make sure that all its existing
mappings are added to the TGCDB.  This would result in a flurry of
AMIE packets as the existing mappings are propagated.

Another possible model is to distinguish between local mappings
(not to be propagated) and global mappings (to be propagated).
"gx-request -replace" will delete only the global mappings for a
given user, and will add the specified mappings as global mappings.
The user will then need to be able to specify, when running gx-request,
whether the mapping is intended to be local or global; what should
the default be?

Does the local vs. global attribute apply to a mapping or to a request?

In the requests.log file, should this be folded into the SOURCE
attribute or should it be a separate attribute?  (Probably the latter.)

For extensibility, I might want to consider different kinds of
"global": propagating to TeraGrid sites, propagating to FooGrid
sites, etc.  I don't think this is worth doing until there's a demand
for FooGrid interaction; most likely some changes will be necessary
anyway.  I should make things easy to change, but guaranteeing *no*
changes is unrealistic.

On yet another hand, it's not clear that the local vs. global
distinction is going to be sufficiently useful.  Requests that
shouldn't be propagated, for the most part, won't be, because the
user doesn't have an account on the other systems.  (In TGCDB terms,
there's no person_id associated with the user, so it's not even
possible to generate an AMIE packet).  And propagating a mapping that
doesn't need to be is mostly harmless.  It can only propagate to a
system where the user has an account; I see no real disadvantage in
enabling a user to use his own certificate for his own account.

Note that all this stuff is likely to increase the frequency of
requests, making the requests.log files grow more quickly than
they have so far and generally slowing things down (see Caltech's
requests.log).  This makes the ability to clean up the requests.log
file more important; see bug-0031.
