# $Id: bug-0081,v 1.2 2006-04-05 20:58:33-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/bugs/bug-0081,v $

gx-map bug 0081
Date: Thu 2006-03-23
Severity: med
Reported by: Keith Thompson <kst@sdsc.edu>
Version: 0.5.0e5
Status: Fixed, 0.5.0e6
Title: Investigate behavior of lock files under NFS

Summary:
The Gridmap_Utils::Get_Lock function uses a lock file to prevent two
copies of the same program from interfering with each other.  It uses
sysopen() with the O_WRONLY | O_EXCL | O_CREAT flags.  This is used
by gx-ca-update and gx-check-requests.

This may not work reliably on an NFS filesystem.

Quoting the Linux man page for open(2):

    O_EXCL When used with O_CREAT, if the file already	exists	it
	   is  an error  and the open will fail. In this context, a
	   symbolic link exists, regardless of where its points to.
	   O_EXCL is broken on NFS  file  systems,  programs  which
	   rely on it for performing locking tasks will contain a
	   race condition.  The solution  for performing  atomic
	   file locking using a lockfile is to create a unique file
	   on the same fs (e.g.,  incorporating  hostname  and pid),
	   use	link(2)  to  make a link to the lockfile. If link()
	   returns 0, the lock is successful.  Otherwise, use  stat(2)
	   on the  unique file to check if its link count has increased
	   to 2, in which case the lock is also successful.

Consider re-implementing this as suggested.

Testing with the old locking code shows sporadic failures, cases where
two processes running on different machines (tg-login1 and tg-login2)
both appear to have successfully obtained the same lock simultaneously.
Testing with new locking code doesn't appear to have this problem.

One open issue: According to the description, if the link() call fails,
the lock is still successful as long as the link count of the unique
file has increased to 2.  It's not at all clear (to me) how this can
happen, why the link() call would have failed, and whether the lock
file then actually exists.  (Presumably it must; otherwise another
process could also get a lock.)

Fixed:
Gridmap_Utils.pm.in 1.168
gx-map release 0.5.0e6
