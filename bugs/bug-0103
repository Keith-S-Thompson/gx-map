# $Id: bug-0103,v 1.3 2006-11-09 18:38:24-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/bugs/bug-0103,v $

gx-map bug 0103
Date: Mon 2006-07-17
Severity: Medium
Reported by: Keith Thompson <kst@sdsc.edu>
Version: 0.5.2.1
Status: Fixed 0.5.2.2.006
Title: Fine-grained locking for gx-ca-update

Currently, gx-ca-update obtains a global lock when it runs.

A solution to bug-0101 will require implementing both read and
write locks.  [Later: No, it won't.]

gx-ca-update obtains a lock because it needs to update finds in the
cache directory; multiple instances working on the same file could
cause unpredictable problems.  Rather than obtaining a global lock,
obtain individual locks on each cache file as it's being used.

In addition to this, provide a mechanism so that a failure to obtain
a lock is not immediately fatal; rather, the client can attempt some
configurable number of retries.  (Be careful that it doesn't keep
trying too long; otherwise successive cron jobs could cause processes
to pile up.)

Another possibility: 

Create the cache files in a way that doesn't require locking: create
a temporary file, then rename it to the target file.  [This was
already being done.]  Code that attempts to use an existing cache
file will then have to be careful to avoid race conditions; rather
than testing "-e $cached_file", it will need to attempt to open it.
Less ambitious: "gx-ca-update" without "-readonly" obtains a lock,
but "gx-ca-update -readonly" doesn't need a lock at all.  Again,
this will require some careful changes to the Cache_File function.

See also bug-0101, bug-0102.

The Cache_File function already downloads to a temporary file and
renames to the actual cache file only if the download succeeded.
With this fix, the Cache_File function actually returns the name of
a hard link to the actual cache file.  This hard link will continue
to refer to the same cached file, even if another update occurs in
parallel while it's being used.  This should avoid any race conditions.
The client must call Gridmap_Utils::Release_Cache_File (which unlinks
it) when it's finished with the cache file

Fixed:
Gridmap_Utils.pm.in 1.226
gx-ca-update.in 1.120
gx-map release 0.5.2.2.006
