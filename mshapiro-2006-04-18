From mshapiro@ncsa.uiuc.edu  Tue Apr 18 18:56:40 2006
X-UIDL: 8899c6e1852538a24406ccb85f4d93f8
Return-Path: <mshapiro@ncsa.uiuc.edu>
Received: from mail.ncsa.uiuc.edu (mail.ncsa.uiuc.edu [141.142.2.28])
	by postal.sdsc.edu (8.11.7/8.11.7/server/72) with ESMTP id k3J1udX27970;
	Tue, 18 Apr 2006 18:56:39 -0700 (PDT)
X-Envelope-From: mshapiro@mail.ncsa.uiuc.edu
Received: from pecos.ncsa.uiuc.edu (pecos.ncsa.uiuc.edu [141.142.4.6])
	by mail.ncsa.uiuc.edu (8.11.7/8.11.7) with ESMTP id k3J1uYu28465;
	Tue, 18 Apr 2006 20:56:34 -0500
Received: (from mshapiro@localhost)
	by pecos.ncsa.uiuc.edu (8.11.7p1+Sun/8.11.7) id k3J1uZh23483;
	Tue, 18 Apr 2006 20:56:35 -0500 (CDT)
From: Michael Shapiro <mshapiro@ncsa.uiuc.edu>
Message-Id: <200604190156.k3J1uZh23483@pecos.ncsa.uiuc.edu>
Subject: Re: gx-propagate
To: kst@sdsc.edu (Keith Thompson)
Date: Tue, 18 Apr 2006 20:56:34 -0500 (CDT)
Cc: mshapiro@ncsa.uiuc.edu (Michael Shapiro),
   squinn@ncsa.uiuc.edu (Steve Quinn), ericrobe@tacc.utexas.edu,
   dhart@sdsc.edu, kst@sdsc.edu (Keith Thompson)
In-Reply-To: <20060419014423.GA12047@elmak.sdsc.edu> from "Keith Thompson" at Apr 18, 2006 06:44:23 PM
X-Mailer: ELM [version 2.5 PL2]
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-NCSA-MailScanner-Information: Please contact help@ncsa.uiuc.edu for more information, mail.ncsa.uiuc.edu
X-NCSA-MailScanner: Found to be clean
Status: RO

There have been changes to that code (as well as at the TGCDB).
I have included the new TGCDB.pm module at the end of this message.
NOTE that the gxmap_remove_dn function has been removed ....

> On Tue, Apr 18, 2006 at 08:36:14PM -0500, Michael Shapiro wrote:
> > What does gx-propagate do?
> 
> It's an optional plug-in program, invoked from gx-check-requests.
> It propagates additions and removals of mappings by writing to the
> TGCDB, using Perl code that you provided.

========== TGCDB.pm ========================
use strict;
use warnings;
use DBI;

package TGCDB;

sub new
{
    my($self, %attr) = @_;
    my($host, $port, $db, $user, $passwd);
    my($raiseError) = 1;
    my($printError) = 0;
    local($_);
    my($key, $value);

    while ( ($key, $value) = each(%attr))
    {
	$host       = $value if lc($key) eq "host";
	$port       = $value if lc($key) eq "port";
	$db         = $value if lc($key) eq "db";
	$user       = $value if lc($key) eq "user";
	$passwd     = $value if lc($key) eq "passwd";
	$raiseError = $value if lc($key) eq "raiseerror";
	$printError = $value if lc($key) eq "printerror";
    }
    die "host not defined"   unless (defined $host);
    die "db not defined"     unless (defined $db);
    die "user not defined"   unless (defined $user);
    die "passwd not defined" unless (defined $passwd);

    my($dsn) = "dbi:Pg:dbname=$db;host=$host";
    $dsn .= ";port=$port" if (defined $port);
    my($dbh) = DBI->connect($dsn, $user, $passwd,
			      {AutoCommit=>1,
			       RaiseError=>$raiseError,
			       PrintError=>$printError});
    my($h) = {dbh=>$dbh, transLevel=>0};
    bless $h, $self;
}

sub gxmap_add_dn
{
    my($self, $resource, $user, $dn) = @_;
    my($sql) = sprintf ("select gxmap.add_dn(%s,%s,%s)",
			   $self->quote($resource, $user, $dn));

    $self->dbh->do ($sql);
}

sub dbh
{
    shift->{dbh};
}

sub quote
{
    my($dbh) = shift->{dbh};
    map {$dbh->quote($_)} @_;
}

sub beginTransaction
{
    my($self) = shift;
    $self->{dbh}->{AutoCommit} = 0 unless ($self->{transLevel} > 0);
    $self->{transLevel}++;
}

sub commitTransaction
{
    my($self) = shift;
    die "not in a transaction" unless ($self->{transLevel} > 0);
    $self->{transLevel}--;
    if ($self->{transLevel} == 0)
    {
	$self->{dbh}->commit;
	$self->{dbh}->{AutoCommit} = 1;
    }
}

sub rollbackTransaction
{
    my($self) = shift;
    die "not in a transaction" unless ($self->{transLevel} > 0);
    $self->{dbh}->rollback;
    $self->{dbh}->{AutoCommit} = 1;
    $self->{transLevel} = 0;
}

sub DESTROY
{
    my($dbh) = shift->{dbh};
    $dbh->disconnect if ($dbh);
}

1;

