#!%PERL%

# $Id: gx-remove-locks.in,v 1.9 2007-02-08 17:33:01-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-remove-locks.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;
use warnings;

use File::Basename ();
use Getopt::Long ();

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use GX ();

sub Usage(@);

my $Program_Name = File::Basename::basename $0;

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( help
                 version ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $GX::VERSION\n";
    exit 0;
}

my $Data_Dir = "$Install_Dir/gx-map-data";

$| = 1;

GX::Check_Data_Dir;
GX::Require_Owner $Program_Name;

my @lock_files = qw( .gx-ca-update.lock
                     .gx-check-requests.lock
                     .gx-check-index.lock
                     .gx-db-check-requests.lock );

my $found_lock_file = 0;

my $now = time;
foreach my $lock_file (@lock_files) {
    my $lock_file_path = "$Data_Dir/$lock_file";
    next if not -e $lock_file_path;
    $found_lock_file = 1;

    my $mtime = GX::Get_mtime $lock_file_path;
    my $modified = undef;
    my $line = undef;
    if (defined $mtime) {
        my $delta = $now - $mtime;
        my $s = ($delta == 1 ? '' : 's');
        $modified = "Modified at " .
                    GX::Time_Image($mtime) .
                    " ($delta second$s ago)";
    }
    if (open my $handle, '<', $lock_file_path) {
        $line = scalar <$handle>;
        chomp $line if defined $line;
        close $handle;
    }

    print "$lock_file_path:\n";
    if (defined $line) {
        print "\"$line\"\n";
    }
    else {
        print "[Unable to determine contents of lock file]\n";
    }
    if (defined $modified) {
        print "$modified\n";
    }
    else {
        print "[Unable to determine age of lock file]\n";
    }

    TRY:
    while (1) {
        print "Remove? [yn] ";
        my $response = scalar <STDIN>;
        if ($response =~ /^y/i) {
            if (unlink $lock_file_path) {
                print "Removed.\n";
            }
            else {
                warn "$lock_file_path: $!\n";
            }
            last TRY;
        }
        elsif ($response =~ /^n/i) {
            last TRY;
        }
        else {
            print "Unrecognized response\n";
        }
    }
}

if (not $found_lock_file) {
    print "No lock files found in $Data_Dir\n";
}

########################################################################

sub Usage(@) {
    print @_ if @_;
    print <<EOF;
Usage: $Program_Name [options] [files]
    -help              : Display this message and exit.
    -version           : Display version information and exit.

Check the status of any lock files in the gx-map data directory.
For each lock file found, ask whether to remove it.
Non-interactive use is not supported.
EOF
    exit 1;
}
