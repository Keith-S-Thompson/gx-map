#!%PERL% -w

# $Id: gx-convert-log.in,v 1.10 2005-06-28 01:13:47-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-convert-log.in,v $

use strict;

########################################################################
# @Copyright@
#
# Copyright (c) 2005 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use File::Basename ();
use Getopt::Long ();

sub Owned_By_Admin($);
sub Usage(@);

$| = 1;

my $Program_Name = File::Basename::basename $0;

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( old-admins=s
                 new-admin=s
                 force!
                 help! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
Usage if scalar @ARGV != 1;
my $Input_Log = $ARGV[0];

my @missing_accounts = ();

my $Is_Old_Admin = undef;
if (defined $User_Opt->{'old-admins'}) {
    foreach my $name (split /,/, $User_Opt->{'old-admins'}) {
        if (not $User_Opt->{force}) {
            my $pw = Gridmap_Utils::Get_PW $name;
            push @missing_accounts, $name if not defined $pw;
        }
        $Is_Old_Admin->{$name} = 1;
    }
}

my $new_admin_uid = undef;
if (defined $User_Opt->{'new-admin'}) {
    if ($User_Opt->{'new-admin'} =~ /,/) {
        Usage "The \"-new-admin\" option takes only a single account\n";
    }
    else {
        my $pw = Gridmap_Utils::Get_PW $User_Opt->{'new-admin'};
        if (defined $pw) {
            $new_admin_uid = $pw->{uid};
        }
        elsif (not $User_Opt->{force}) {
            push @missing_accounts, $User_Opt->{'new-admin'};
        }
    }
}

if (@missing_accounts) {
    my $s = ( scalar @missing_accounts == 1 ? '' : 's' );
    Usage "Missing account$s: @missing_accounts\n";
}

my $now = time;

my $Rev = '$Revision: 1.10 $';
$Rev =~ s/^\\s*//;
$Rev =~ s/\s*\$$//;

Usage "Can't read file $Input_Log\n" if not -r $Input_Log;

my @refs = Gridmap_Utils::Read_Records
               '-multiple', '-keep-comments', $Input_Log;

my $timestamp = Gridmap_Utils::Time_Image $now;

print '# $', 'Id:$', "\n";
print '# $', 'Source:$', "\n";
print "# Converted $timestamp by $Program_Name ",
      "(gx-map $Gridmap_Utils::VERSION)\n";
print "# Converting ", scalar @refs, " records\n";
print "\n";

foreach my $ref (@refs) {
    next if defined $ref->{comment_lines};
    my $owner_is_admin = Owned_By_Admin $ref;

    my $comment = (defined $ref->{comment} ? $ref->{comment} : '');
    my $new_comment = undef;

    if ($owner_is_admin) {
        if (defined $ref->{dn}) {
            $ref->{dn} = Gridmap_Utils::GT3_Subject $ref->{dn};
        }
            
        if (not defined $ref->{SOURCE}) {
            if ($comment =~ /^cacl certificate/) {
                $ref->{SOURCE} = 'NPACI-CA';
            }
            elsif ($comment =~ /^NPACI CA certificate/) {
                $ref->{SOURCE} = 'NPACI-CA';
            }
            elsif ($comment =~ /^SDSC CA certificate/) {
                $ref->{SOURCE} = 'SDSC-CA';
            }
            else {
                $ref->{SOURCE} = 'admin';
            }
        }
        if (defined $User_Opt->{'new-admin'} and
            $User_Opt->{'new-admin'} ne $ref->{OWNER_NAME})
        {
            $new_comment
                = "$Program_Name changed OWNER_NAME from " .
                  "$ref->{OWNER_NAME} to $User_Opt->{'new-admin'}";
            $ref->{OWNER_NAME} = $User_Opt->{'new-admin'};
            if (defined $new_admin_uid) {
                $new_comment .=
                    ", OWNER_UID from $ref->{OWNER_UID} to $new_admin_uid";
                $ref->{OWNER_UID} = $new_admin_uid;
            }
        }
    }
    else {
        if (not defined $ref->{SOURCE}) {
            $ref->{SOURCE} = 'user';
        }
    }

    my @comments = ();
    if (defined $ref->{comment}) {
        if (ref $ref->{comment} eq 'ARRAY') {
            @comments = @{$ref->{comment}};
        }
        else {
            @comments = ( $ref->{comment} );
        }
    }
    if (defined $new_comment) {
        push @comments, $new_comment;
    }
    if (@comments) {
        if (scalar @comments == 1) {
            $ref->{comment} = $comments[0];
        }
        else {
            $ref->{comment} = \@comments;
        }
    }
}

Gridmap_Utils::Write_Records '-multiple', '-', @refs;

print "# $Program_Name done.\n\n";

########################################################################

sub Owned_By_Admin($) {
    my($ref) = @_;
    return 0 if not defined $ref->{OWNER_NAME};
    if (defined $Is_Old_Admin) {
        return $Is_Old_Admin->{$ref->{OWNER_NAME}};
    }
    else {
        return Gridmap_Utils::Is_Globus_Admin $ref->{OWNER_NAME};
    }
} # Owned_By_Admin

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] logfile

Reads a gx-map requests.log file and writes on stdout an equivalent
file for use with gx-map release 0.4.x.  Adds a SOURCE attribute
to each record that doesn't already have one.

If the "-old-admins" or "-new-admin" option is specified, the
OWNER_NAME and OWNER_UID attributes are updated.  This is useful if
you want to change the set of administrative accounts.

    -old-admins name,name  Account(s) treated as administrators in input log
    -new-admin name        Administrative account for output log
    -force                 The arguments to "-old-admins" and "-new-admin"
                           must be existing accounts; "-force" overrides
                           that check.
EOF
    exit 1;
} # Usage
