#!%PERL%

# $Id: gx-convert-log.in,v 1.35 2007-02-08 17:32:59-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-convert-log.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;
use warnings;

use File::Basename ();
use Getopt::Long ();

sub Usage(@);

$| = 1;

my $Program_Name = File::Basename::basename $0;

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use GX ();

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( help!
                 version! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $GX::VERSION\n";
    exit 0;
}
Usage if scalar @ARGV != 1;
my $Input_Log = $ARGV[0];

Usage "Can't read file $Input_Log\n" if not -r $Input_Log;

my @refs = GX::Read_Records '-multiple', '-keep-comments', $Input_Log;
if (not @refs) {
    die "No records in logfile $Input_Log\n";
}

#
# Get the number of records excluding comment blocks.
# Verify that all records have a SOURCE attribute.
# (Older versions of this command would add SOURCE attributes as needed;
# all log files from versions 0.4 and up should already have SOURCE
# attributes.)
#
my $record_count = 0;
my $no_source_count = 0;
foreach my $ref (@refs) {
    if ($ref->{operation} ne 'comment') {
        $record_count ++;
        $no_source_count ++ if not defined $ref->{SOURCE};
    }
}

if ($no_source_count != 0) {
    die "$Input_Log: $no_source_count of $record_count records " .
        "have no SOURCE attribute.\n";
}

my $Now = GX::Time_Image time;

my @header_comment_lines = ();
if ($refs[0]->{operation} eq 'comment') {
    @header_comment_lines = @{$refs[0]->{lines}};
}

if (not (defined $header_comment_lines[0] and
         $header_comment_lines[0] =~ /\$\w+:.*\$/))
{
    #
    # We don't already have RCS header lines; add them.
    # Split the strings so they aren't expanded when this file is
    # checked in.
    #
    unshift @header_comment_lines,
            '$' . 'Id:$',
            '$' . 'Source:$',
}
push @header_comment_lines,
     "Converted $Now by $Program_Name (gx-map $GX::VERSION)",
     "Converting $record_count record(s)";

if ($refs[0]->{operation} ne 'comment') {
    unshift @refs, {operation => 'comment'};
}
$refs[0]->{lines} = \@header_comment_lines;

foreach my $ref (@refs) {
    next if $ref->{operation} eq 'comment';

    my $comment = (defined $ref->{comment} ? $ref->{comment} : '');
    my $new_comment = undef;

    $ref->{timestamp} = GX::Timestamp_Of $ref->{timestamp};

    if (defined $ref->{dn}) {
        $ref->{dn} = GX::Normalize_DN $ref->{dn};
    }
    if (defined $ref->{secondary}) {
        delete $ref->{secondary};
    }
    if (defined $ref->{map_to_name}) {
        $ref->{username} = $ref->{map_to_name};
        delete $ref->{map_to_name};
    }
    if (defined $ref->{map_to_uid}) {
        $ref->{user_uid} = $ref->{map_to_uid};
        delete $ref->{map_to_uid};
    }

    my @comments = ();
    if (defined $ref->{comment}) {
        if (ref $ref->{comment} eq 'ARRAY') {
            @comments = @{$ref->{comment}};
        }
        else {
            @comments = ( $ref->{comment} );
        }
    }
    if (defined $new_comment) {
        push @comments, $new_comment;
    }
    if (@comments) {
        if (scalar @comments == 1) {
            $ref->{comment} = $comments[0];
        }
        else {
            $ref->{comment} = \@comments;
        }
    }
}

GX::Write_Records '-multiple', '-', @refs;

print "# $Program_Name (gx-map $GX::VERSION) done.\n\n";

########################################################################

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] logfile

Reads a gx-map requests.log file and writes on stdout an equivalent
file for use with the current gx-map release.

    -help                  Display this message and exit
    -version               Display version information and exit
EOF
    exit 1;
} # Usage
