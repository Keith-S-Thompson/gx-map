# $Id: Gridmap_Valid_Mappings.pm.in,v 1.21 2004-11-15 16:01:16-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/Attic/Gridmap_Valid_Mappings.pm.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2004 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

package Gridmap_Valid_Mappings;

################ Module Preamble ################

my $Install_Dir;
BEGIN {
    require 5.006;
    use vars qw($Debugging);
    $Debugging = undef;
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}

use File::Basename ();
use Gridmap_Utils ();

# ----------------------------------------------------------------------

sub Debug(@);
sub Debugf(@);
sub Valid_Mappings(@);

# ----------------------------------------------------------------------

#
#
# The Valid_Mappings function is called with a reference to a request
# record.  Optionally, the reference may be preceded by a string argument
# equal to '-all', indicating that mappings for nonexistent users (users
# who don't have an account on the current system) are allowed.
#
# Given a reference to a request record, the Valid_Mappings function
# returns a list of references to hashes specifying valid mappings, where
# each hash has keys "dn" and "map_to_name".  Both keys are optional;
# at least one will always be set.  (For "add" and "remove" operations,
# both "dn" and "map_to_name" are set; for "remove-dn" only "dn" is set;
# for "remove-user" only "map_to_name" is set.)  If there are no valid
# mappings, an empty list is returned.
#
# This function may be customized for each installation.
#
# To create a customized version, copy the file "Gridmap_Valid_Mappings.pm.in"
# to, for example, "Gridmap_Valid_Mappings.pm.in.foo", and add an entry
# to the configuration file (used by configure-gx-map) setting the
# VALID_MAPPINGS_FILE parameter to the name of your file.
#
# If no value for VALID_MAPPINGS_FILE is specified, the default
# implementation will be used.
#
# The most basic implementation returns a single mapping if the
# map_to_name field (if set) is a valid account on this system (unless
# "-all" is specified), the OWNER_NAME field either matches map_to_name
# (if set) or is a Globus administrator, and the NAMESPACE field
# is correct.  If the map_to_name field is not set (for a remove-dn
# operation), the OWNER_NAME field must be a Globus administrator.
# (If OWNER_NAME is not set but OWNER_UID is, the OWNER_NAME is set
# by a passwd lookup on the OWNER_UID; this should apply only to the
# local namespace.)
#
# A more sophisticated implementation might refer to a user database,
# map to a local user derived from a (possibly remote) user name in
# the record, confirm that the dn corresponds to a recognized CA, and
# so forth.
#
sub Valid_Mappings(@) {
    my @args = @_;
    my $all;
    my $request;
    if (scalar @args == 2 and $args[0] eq '-all') {
        $all = 1;
        $request = $args[1];
    }
    elsif (scalar @args == 1) {
        $all = 0;
        $request = $args[0];
    }
    else {
        die "Internal error: Invalid arguments to Valid_Mappings";
    }

    Debug ">>> Entering Valid_Mappings\n";
    Debug "    \$all = $all\n";
    Debug "    operation = $request->{operation}\n";
    Debug "    dn = ", (exists $request->{dn} ? $request->{dn} : 'undef'), "\n";
    Debug "    map_to_name = ",
          (exists $request->{map_to_name} ? $request->{map_to_name} : 'undef'),
          "\n";

    if (defined $request->{OWNER_UID} and not defined $request->{OWNER_NAME}) {
        my $pw = Gridmap_Utils::Get_PW($request->{OWNER_UID});
        if (defined $pw->{name}) {
            $request->{OWNER_NAME} = $pw->{name};
        }
    }

    if (not defined $request->{OWNER_NAME}) {
        Debug ">>> Invalid, no OWNER_NAME\n";
        return ();
    }
    if (defined $request->{map_to_name}) {
        my @pw = getpwnam $request->{map_to_name};
        if (not @pw and not $all) {
            Debug ">>> Invalid, no such user\n";
            return ();
        }
        if ($pw[2] == 0) {
            Debug ">>> Invalid, cannot map to UID 0 (root)\n";
            return ();
        }
    }
    if (not defined $request->{NAMESPACE}) {
        Debug ">>> Invalid, no NAMESPACE\n";
        return ();
    }
    if ($request->{NAMESPACE} ne $Gridmap_Utils::Config{NAMESPACE}) {
        Debug ">>> Invalid, NAMESPACE ne $Gridmap_Utils::Config{NAMESPACE}\n";
        return ();
    }
    if (exists $request->{map_to_name}) {
        if ($request->{OWNER_NAME} ne $request->{map_to_name} and
            not Gridmap_Utils::Is_Globus_Admin $request->{OWNER_NAME})
        {
            Debug ">>> Invalid, bad OWNER_NAME\n";
            return ();
        }
    }
    else {
        if (not Gridmap_Utils::Is_Globus_Admin $request->{OWNER_NAME}) {
            Debug ">>> Invalid, OWNER_NAME is not an admin\n";
            return ();
        }
    }

    #
    # This default implementation returns a single entry.
    #
    my @result = ();

    my $entry = {};
    if (defined $request->{dn}) {
        $entry->{dn} = $request->{dn};
    }
    if (defined $request->{map_to_name}) {
        $entry->{map_to_name} = $request->{map_to_name};
    }

    push @result, $entry;

    return @result;
} # Valid_Mappings

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $Debugging;
} # Debug   

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $Debugging; 
} # Debugf  

1;
