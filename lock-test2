#!/usr/bin/perl -w

# $Id: lock-test2,v 1.1 2006-04-05 13:28:27-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/lock-test2,v $

use strict;
use Net::Domain ();
use Time::HiRes ();
use Fcntl qw(O_WRONLY O_EXCL O_CREAT);

sub Trace($);
sub Get_Hostname();
sub Get_Lock();
sub Release_Lock();

my $interval = 5;

my $hostname = Get_Hostname;
my $Me = time . " $hostname.$$";
my $Lock_File = '/projects/misc/gx-map/TEST/lock-dir/.lock';
my $Local_Lock_File = "$Lock_File.$hostname.$$";

$| = 1;

sleep 300 - time % 300;
my $end_time = time + 120;
while (time < $end_time) {
    # my ($sec, $usec) = Time::HiRes::gettimeofday;
    # my $remaining = ($interval - $sec % $interval) * 1e6 - $usec;
    # Time::HiRes::usleep $remaining;
    Time::HiRes::usleep rand 20_000;
    if (Get_Lock) {
        Time::HiRes::usleep rand 20_000;
        Release_Lock;
    }
}

########################################################################

sub Trace($) {
    my($sec, $usec) = Time::HiRes::gettimeofday;
    my $timestamp = sprintf "%010d.%06d", $sec, $usec;
    printf "%010d.%06d %-32s %8d %s\n", $sec, $usec, $hostname, $$, "@_";
} # Trace

# ----------------------------------------------------------------------

sub Get_Hostname() {
    local($SIG{__WARN__}) = sub { };
    return Net::Domain::hostfqdn;
} # Get_Hostname

# ----------------------------------------------------------------------

#
# Get a lock; the name should be the program name.
# Attempt to create the file; use sysopen so the attempt fails
# if the file already exists.
# If no lock exists, create it and write a line of information
# to it.  (This information is not currently used.)
# If the lock does exist, die.
#
sub Get_Lock() {
    open my $lock, '>', $Local_Lock_File
        or die "$Local_Lock_File: $!\n";
    close $lock;

    if (link $Local_Lock_File, $Lock_File) {
        Trace "got lock";
        return 1;
    }
    else {
        my $link_error = $!;
        my @stat = stat $Local_Lock_File;
        if (@stat and $stat[3] == 2) {
            Trace "got lock (but link failed: $link_error)";
            return 1;
        }
        else {
            Trace "Failed to get lock: $link_error";
            return 0;
        }
    }
} # Get_Lock

# ----------------------------------------------------------------------

#
# Delete the lock file created by Get_Lock().
#
sub Release_Lock() {
    my $message;
    if (unlink $Local_Lock_File) {
        $message = "deleted local lock";
    }
    else {
        $message = "failed to delete local lock: $!";
    }

    if (unlink $Lock_File) {
        $message .= ", released lock";
    }
    else {
        $message .= ", failed to release lock: $!";
    }

    Trace $message;
} # Release_Lock
