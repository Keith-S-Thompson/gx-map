#!/usr/bin/perl -w

# $Id: gx-check-prereqs,v 1.16 2005-08-26 16:32:28-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-check-prereqs,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2005 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

use Getopt::Long ();
use File::Basename ();

sub Usage(@);
sub Check_Perl($);
sub Check_Command($);
sub Check_Module($;$);
sub Wget_Supports_SSL();
sub Vprint(@);
sub Vprintf(@);

$| = 1;

my $Program_Name = File::Basename::basename $0;

my %Opt = ( path => '/bin:/usr/bin' );
my @Opts = ( \%Opt, qw( help
                        version
                        path=s
                        verbose!
                        teragrid! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $Opt{help};
Usage if @ARGV;

if ($Opt{version}) {
    print "$Program_Name (gx-map) (no version)\n";
    exit 1;
}

$ENV{PATH} = $Opt{path};
my @path = split /:/, $ENV{PATH};

my @path_errors = ();
foreach my $dir (@path) {
    if (not -d $dir) {
        push @path_errors, "No directory $dir\n";
    }
    elsif ($dir !~ /^\//) {
        push @path_errors, "Directory $dir is not an absolute pathname\n";
    }
}
die @path_errors if @path_errors;

my @Errors = ();
my $Perl_OK = 1;
my %Command_Found = ();
my $All_Commands_Found = 1;
my %Module_Found = ();
my $All_Modules_Found = 1;

Check_Perl 5.006;

Check_Command 'hostname';
Check_Command 'co';
Check_Command 'ci';
Check_Command 'rcs';
Check_Command 'ncftpget';
Check_Command 'wget';
Check_Command 'openssl';

Check_Module 'File::Basename';
Check_Module 'File::Copy';
Check_Module 'Getopt::Long';
Check_Module 'Time::Local';
Check_Module 'Cwd';
Check_Module 'Net::Domain';
Check_Module 'Time::HiRes';
if ($Opt{teragrid}) {
    Check_Module '-teragrid', 'DBI';
    Check_Module '-teragrid', 'DBD::Pg';
}

my @Notes = ();

if (not $Perl_OK or not $All_Modules_Found) {
    push @Notes, <<"EOF";
Note: Consider changing the "#!" line at the top of this script
      or invoking it with "/path/to/perl $Program_Name"
      to get a newer version of Perl and/or any missing modules.
      This should match the PERL option in your config file.

EOF
}

if (not $All_Commands_Found) {
    push @Notes, <<"EOF";
Note: Consider specifying a different value for \$PATH to find
      missing commands.  This should match the PATH option in
      your config file.

EOF
}

if ($Module_Found{'Net::Domain'} and not $Command_Found{hostname}) {
    push @Notes, <<"EOF";
Note: Missing hostname command is ok, will use Net::Domain module

EOF
}
elsif (not $Module_Found{'Net::Domain'} and $Command_Found{hostname}) {
    push @Notes, <<"EOF";
Note: Missing Net::Domain module is ok, will use hostname command

EOF
}

if ($Command_Found{wget}) {
    my $ssl = Wget_Supports_SSL();
    if (not defined $ssl) {
        push @Notes, <<"EOF";
Note: Can't determine whether wget supports SSL.

EOF
    }
    elsif (not $ssl) {
        push @Notes, <<"EOF";
Note: Your wget command does not support SSL.
      This may be a problem for CAs that use https.

EOF
    }
}

if (@Errors) {
    print @Errors;
    if (@Notes) {
        print "\n";
        print @Notes;
    }
    exit 1;
}
else {
    print "All preprequisites ok\n";
    if (@Notes) {
        print "\n";
        print @Notes;
    }
    exit 0;
}

########################################################################

sub Check_Perl($) {
    my($min_version) = @_;
    Vprint "Checking Perl version (need $min_version, have $]): ";
    if ($] < $min_version) {
        Vprint "too old\n";
        push @Errors, "Using Perl version $], need at least $min_version\n";
        $Perl_OK = 0;
    }
    else {
        Vprint "ok\n";
    }
} # Check_Perl

# ----------------------------------------------------------------------

sub Check_Command($) {
    my($command) = @_;    
    Vprintf "%-50s", "Checking for $command command: ";
    foreach my $dir (@path) {
        if (-x "$dir/$command") {
            Vprint "found $dir/$command\n";
            $Command_Found{$command} = 1;
            last;
        }
    }
    if (not $Command_Found{$command}) {
        Vprint "not found in \$PATH=$ENV{PATH}\n";
        push @Errors, "Command $command not found\n";
        $All_Commands_Found = 0;
        return;
    }
} # Check_Command

# ----------------------------------------------------------------------

sub Check_Module($;$) {
    my $teragrid = 0;
    if (scalar @_ == 2 and $_[0] eq '-teragrid') {
        shift;
        $teragrid = 1;
    }
    my($module) = @_;
    Vprintf "%-50s", "Checking for Perl module $module: ";
    eval "require $module";
    if ($@ eq '') {
        Vprint "found\n";
        $Module_Found{$module} = 1;
    }
    else {
        my $tg_string = $teragrid ? ' (TeraGrid only)' : '';
        Vprint "not found$tg_string\n";
        push @Errors, "Module $module not found$tg_string\n";
        $All_Modules_Found = 0;
    }
} # Check_Module

# ----------------------------------------------------------------------

sub Wget_Supports_SSL() {
    my $lines = 0;
    my $supports_ssl = 0;
    open PIPE, "wget --help |";
    while (<PIPE>) {
        $lines ++;
        $supports_ssl = 1 if /\bssl\b/i;
    }
    close PIPE;
    if ($lines == 0) {
        return 'unknown';
    }
    else {
        return $supports_ssl;
    }
} # Wget_Supports_SSL

# ----------------------------------------------------------------------

sub Vprint(@) {
    print @_ if $Opt{verbose};
} # Vprint

# ----------------------------------------------------------------------

sub Vprintf(@) {
    printf @_ if $Opt{verbose};
} # Vprintf

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options]
    -help       Display this message and exit.
    -version    Display version number and exit.
                Note that $Program_Name doesn't really have a version 
                number; this option is included for consistency with
                other gx-map commands.
    -verbose    Verbose output
    -path ...   Specify value of \$PATH.
                Default is "/bin:/usr/bin".
    -teragrid   Check for packages required for TeraGrid functionality.
EOF
    exit 1;

} # Usage
