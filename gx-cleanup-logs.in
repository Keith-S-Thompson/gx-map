#!%PERL% -wT

# $Id: gx-cleanup-logs.in,v 1.18 2005-07-17 17:04:01-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-cleanup-logs.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2005 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

use File::Basename ();
use File::Copy ();
use Getopt::Long ();

sub Usage(@);
sub Debug(@);
sub Debugf(@);

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

$ENV{PATH} = '/bin:/usr/bin';

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

my $Program_Name = File::Basename::basename $0;

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( help
                 version
                 merge-only!
                 delete!
                 sdsc!
                 debugging! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $Gridmap_Utils::VERSION\n";
    exit 0;
}

Gridmap_Utils::Install_Die_Handler;
Gridmap_Utils::Install_Warn_Handler;

if ($User_Opt->{debugging}) {
    $Gridmap_Utils::Debugging = 1;
}

my @input_logs = ( @ARGV ? @ARGV : '-' );

my @requests;
foreach my $log (@input_logs) {
    push @requests,
         Gridmap_Utils::Read_Records '-multiple', '-keep-comments', $log;
}

if ($User_Opt->{debugging}) {
    Debug "Before sorting:\n";
    foreach my $request (@requests) {
        Debug "$request $request->{timestamp} $request->{operation}\n";
    }
}

#
# Sort by timestamp
#
@requests = Gridmap_Utils::Sort_By_Timestamp @requests;

if ($User_Opt->{debugging}) { 
    Debug "After sorting:\n";
    foreach my $request (@requests) {
        Debug "$request $request->{timestamp} $request->{operation}\n";
    }
}

#
# Create indexing hashes to allow quick searches for a given DN or
# user name.  For %by_dn, keys are DNs and values are references to
# arrays of request records.  Similarly, for %by_name, keys are user
# names and values are references to arrays of request records.
#
my %by_dn = ();
my %by_name = ();
foreach my $request (@requests) {
    if (defined $request->{dn}) {
      push @{$by_dn{$request->{dn}}}, $request;
    }
    if (defined $request->{username}) {
      push @{$by_name{$request->{username}}}, $request;
    }
}

if (not $User_Opt->{'merge-only'}) {
    #
    # Delete redundant records:
    #
    # Start at the most recent and go backwards in time.
    #
    # For a remove, delete it and all previous adds and removes for the same
    # user/DN pair.
    #
    # For a remove-user, delete it and all previous adds, removes, and
    # remove-users for the same user.
    # 
    # For a remove-dn, delete it and all previous adds and removes for
    # the same DN.
    #
    # For an add, leave it in place but delete all previous adds and
    # removes for the same user/DN pair.
    #
    # This may not delete all redundant requests, but it should catch most
    # of them.
    #
    NEW:
    foreach my $new (reverse @requests) {
        next NEW if $new->{operation} eq 'comment';
        next NEW if exists $new->{__DELETED__};
        my $new_op = $new->{operation};
        my $new_timestamp = $new->{timestamp};
        Debug "Outer loop, $new, $new_op\n";

        if ($User_Opt->{sdsc} and
            defined $new->{dn} and
            $new->{dn} =~ m(^/C=US/O=SDSC/OU=SDSC) and
            $new->{SOURCE} ne 'SDSC-CA')
        {
            $new->{__DELETED__} = 1;
            next NEW;
        }

        if ($new_op =~ /^remove/) {
            $new->{__DELETED__} = 1;
        }

        #
        # Collect references for all records older than $new that refer
        # to the same DN and/or user name.
        #
        # Use %seen to track which records we've seen (so a record that
        # matches by both DN and use name is not added twice).  Note that
        # the keys of %seen are hash references, so the actual stored
        # keys are strings; they can be used for comparison, but they
        # are no longer usable as references.
        #
        my %seen = ();
        my @old = ();
        if (defined $new->{dn}) {
            foreach my $ref (@{$by_dn{$new->{dn}}}) {
                next if $ref->{timestamp} ge $new_timestamp;
                if (not $seen{$ref}) {
                    push @old, $ref;
                    $seen{$ref} = 1;
                }
            }
        }
        if (defined $new->{username}) {
            foreach my $ref (@{$by_name{$new->{username}}}) {
                next if $ref->{timestamp} ge $new_timestamp;
                if (not $seen{$ref}) {
                    push @old, $ref;
                    $seen{$ref} = 1;
                }
            }
        }

        OLD:
        foreach my $old (@old) {
            my $old_op = $old->{operation};
            next OLD if $old_op eq 'comment';
            next OLD if exists $old->{__DELETED__};
            Debug "Inner loop, $old $old_op\n";
            next if $new->{NAMESPACE} ne $old->{NAMESPACE};

            if ( $new_op eq 'remove' and
                 ( $old_op eq 'add' or $old_op eq 'remove' ) and
                 $old->{username} eq $new->{username} and
                 $old->{dn} eq $new->{dn} )
            {
                Debug "Deleting $old, $old_op\n";
                $old->{__DELETED__} = 1;
            }

            elsif ( $new_op eq 'remove-user' and
                    ( $old_op eq 'add' or
                      $old_op eq 'remove' or
                      $old_op eq 'remove-user' ) and
                    $old->{username} eq $new->{username} )
            {
                Debug "Deleting $old, $old_op\n";
                $old->{__DELETED__} = 1;
            }

            elsif ( $new_op eq 'remove-dn' and
                    ( $old_op eq 'add' or
                      $old_op eq 'remove' or
                      $old_op eq 'remove-dn' ) and
                    $old->{dn} eq $new->{dn} )
            {
                Debug "Deleting $old, $old_op\n";
                $old->{__DELETED__} = 1;
            }

            elsif ( $new_op eq 'add' and
                    ( $old_op eq 'add' or $old_op eq 'remove' ) and
                    $old->{username} eq $new->{username} and
                    $old->{dn} eq $new->{dn} )
            {
                Debug "Deleting $old, $old_op\n";
                $old->{__DELETED__} = 1;
            }
        }
    }
}

if ($User_Opt->{debugging}) {
    Debug "After filtering:\n";
    foreach my $request (@requests) {
        Debug "$request $request->{timestamp} $request->{operation}\n";
    }
}

if ($User_Opt->{delete}) {
    @requests = grep { not exists $_->{__DELETED__} } @requests;
}

Gridmap_Utils::Write_Records '-multiple', '-', @requests;

########################################################################

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] [files]
Option names may be abbreviated.
    -help        Display this message and exit.
    -version     Display version information and exit.
    -merge-only  Merge and sort input records; don't delete anything.
    -delete      Delete redundant requests (default is to comment them out).
    -sdsc        Delete requests for SDSC certificates without SOURCE=SDSC-CA
    -debugging   Enable debugging output.

Read gx-map requests log(s) from specified files or from stdin.
Write to stdout a requests log, sorted by timestamp, with redundant
requests commented out or deleted.
EOF
    exit 1;
} # Usage

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf
