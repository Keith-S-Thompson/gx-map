!%PERL% -wT

# $Id: gx-propagate.in.teragrid,v 1.10 2005-07-26 21:41:58-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-propagate.in.teragrid,v $

use strict;

########################################################################
# @Copyright@
#
# Copyright (c) 2005 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
# TGCDB interface provided by Michael Shapiro <mshapiro@ncsa.uiuc.edu>
########################################################################

use File::Basename ();
use Getopt::Long ();

sub Usage(@);
sub Get_Config($);
sub Quote(@);
sub Debug(@);
sub Debugf(@);

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

my $Program_Name = File::Basename::basename $0;
my @SAVED_ARGV = @ARGV;

my $User_Opt = {};
my @Opts = ( $User_Opt,
             qw( help
                 version
                 debugging
                 add
                 remove
                 remove-dn
                 remove-user
                 dn=s
                 username=s ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
Usage if @ARGV;

$| = 1 if $User_Opt->{debugging};

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $Gridmap_Utils::VERSION\n";
    exit 0;
}

my @operations = ();
foreach my $op (qw(add remove remove-dn remove-user)) {
    push @operations, $op if $User_Opt->{$op};
}

my $Operation;

if (scalar @operations == 0) {
    Usage "No operation specified\n";
}
elsif (scalar @operations == 1) {
    $Operation = $operations[0];
}
else {
    Usage "Multiple operations specified\n";
}

my $message = '';
if ($Operation ne 'remove-dn' and not defined $User_Opt->{username}) {
    $message .= "Missing -username option\n";
}
if ($Operation ne 'remove-user' and not defined $User_Opt->{dn}) {
    $message .= "Missing -dn option\n";
}
Usage $message if $message ne '';

my $Config = Get_Config "$Install_Dir/etc/tgcdb.conf";

Debug "Configuration:\n";
foreach my $key (sort keys %$Config) {
    my $value = $Config->{$key};
    if ($key eq 'passwd') {
        $value = '[not shown]';
    }
    Debugf "    %-10s => %s\n", $key, $value;
}

if ($Operation eq 'add' or $Operation eq 'remove') {
    Debug ucfirst $Operation,
          " mapping for username $User_Opt->{username}",
          " to \"$User_Opt->{dn}\"\n";
}
elsif ($Operation eq 'remove-dn') {
    Debug "Remove mappings for DN \"$User_Opt->{dn}\"\n";
}
elsif ($Operation eq 'remove-user') {
    Debug "Remove mappings for user $User_Opt->{username}\n";
}
else {
    die "$Program_Name: Internal error, \$Operation = \"$Operation\"\n";
}

#
# Database transactions produce trace output on stderr.
# Log this output to a file.
#
my $logfile = "$Install_Dir/var/tgcdb.log";
open LOG, ">>$logfile" || die "${logfile}: $!\n";
print LOG "\n", Gridmap_Utils::Time_Image time, "\n";
print LOG "$Program_Name ", Quote(@SAVED_ARGV), "\n";

open SAVE_STDERR, '>&STDERR';
print SAVE_STDERR if 0;    # to make "perl -cwT" happy
close STDERR;
open STDERR, '>&LOG';

if ($Operation eq 'remove-dn' or $Operation eq 'remove-user') {
    die "$Program_Name: $Operation not yet implemented\n";
}

Debug "new TGCDB\n";
my $tg = new TGCDB (host   => $Config->{host},
                    db     => $Config->{db},
                    user   => $Config->{user},
                    passwd => $Config->{passwd});

Debug "\$tg->beginTransaction\n";
$tg->beginTransaction;
if ($Operation eq 'add') {
    Debug "\$tg->gxmap_add_dn\n";
    $tg->gxmap_add_dn($Config->{resource},
                      $User_Opt->{username},
                      $User_Opt->{dn});
}
elsif ($Operation eq 'remove') {
    Debug "\$tg->gxmap_remove_dn\n";
    $tg->gxmap_remove_dn($Config->{resource},
                         $User_Opt->{username},
                         $User_Opt->{dn});
}
else {
    die "Internal error, \$Operation = ",
        defined $Operation ? "\"$Operation\"" : 'undef',
        "\n";
}
Debug "\$tg->commitTransaction\n";
$tg->commitTransaction;
Debug "commitTransaction done\n";

#
# Now put things back (probably unnecessary since we're about to exit,
# but good style).
#
close STDERR;
open STDERR, '>&SAVE_STDERR';
close LOG;

########################################################################

sub Get_Config($) {
    my($config_file) = @_;
    Debug "Get_Config $config_file\n";
    my $config = Gridmap_Utils::Read_Records '-single', $config_file;
    my @keys = sort keys %$config;
    #
    # To do: Give a more detailed error message.
    #
    if ("@keys" ne 'db host namespace passwd resource user') {
        die "Bad config file $config_file\n";
    }
    return $config;
} # Get_Config

# ----------------------------------------------------------------------

sub Quote(@) {
    my @args = @_;
    foreach my $arg (@args) {
        if ($arg =~ / /) {
            $arg = "\"$arg\"";
        }
    }
    return join ' ', @args;
} # Quote

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name -help|-version
       $Program_Name <operation> -username <name> -dn "string"
where <operation> is one of -add, -remove, -remove-dn, -remove-user

Propagate a mapping to an implementation-defined interface, such as
a cross-site user database.

    -help           Show this message and exit.
    -version        Show version information and exit.
    -add            Add a mapping.
    -remove         Remove a mapping.
    -remove-dn      Remove all mappings for a DN.
    -remove-user    Remove all mappings for a user.
    -username name  Unix user name to map or unmap.
    -dn "string"    Distinguished name.
    -debugging      Enable debugging output.

EOF
    exit 1;
} # Usage

# ----------------------------------------------------------------------

#
# The TGCDB package is included here inline to minimize the number of
# additional files that have to be installed to enable the functionality.
#
# This package was provided by Michael Shapiro <mshapiro@ncsa.uiuc.edu>.
#
{
    package TGCDB;

    use DBI;

    sub new
    {
        my($self, %attr) = @_;
        my($host, $port, $db, $user, $passwd);
        my($raiseError) = 1;
        my($printError) = 0;
        local($_);
        my($key, $value);

        while ( ($key, $value) = each(%attr))
        {
            $host       = $value if lc($key) eq "host";
            $port       = $value if lc($key) eq "port";
            $db         = $value if lc($key) eq "db";
            $user       = $value if lc($key) eq "user";
            $passwd     = $value if lc($key) eq "passwd";
            $raiseError = $value if lc($key) eq "raiseerror";
            $printError = $value if lc($key) eq "printerror";
        }
        die "host not defined"   unless (defined $host);
        die "db not defined"     unless (defined $db);
        die "user not defined"   unless (defined $user);
        die "passwd not defined" unless (defined $passwd);

        my($dsn) = "dbi:Pg:dbname=$db;host=$host";
        $dsn .= ";$port" if (defined $port);
        my($dbh) = DBI->connect($dsn, $user, $passwd,
                                  {AutoCommit=>1,
                                   RaiseError=>$raiseError,
                                   PrintError=>$printError});
        my($h) = {dbh=>$dbh, transLevel=>0};
        bless $h, $self;
    }

    sub gxmap_add_dn
    {
        my($self, $resource, $user, $dn) = @_;
        $self->_gxmap_insert_dn_tbl($resource, $user, $dn, "add");
    }

    sub gxmap_remove_dn
    {
        my($self, $resource, $user, $dn) = @_;
        $self->_gxmap_insert_dn_tbl($resource, $user, $dn, "remove");
    }

    sub _gxmap_insert_dn_tbl
    {
        my($self, $resource, $user, $dn, $action) = @_;
        my($sql) = sprintf ("select gxmap.insert_dn_tbl(%s,%s,%s,%s)",
                               $self->quote($resource, $user, $dn, $action));

        $self->dbh->do ($sql);
    }

    sub dbh
    {
        shift->{dbh};
    }

    sub quote
    {
        my($dbh) = shift->{dbh};
        map {$dbh->quote($_)} @_;
    }

    sub beginTransaction
    {
        my($self) = shift;
        $self->{dbh}->{AutoCommit} = 0 unless ($self->{transLevel} > 0);
        $self->{transLevel}++;
    }

    sub commitTransaction
    {
        my($self) = shift;
        die "not in a transaction" unless ($self->{transLevel} > 0);
        $self->{transLevel}--;
        if ($self->{transLevel} == 0)
        {
            $self->{dbh}->commit;
            $self->{dbh}->{AutoCommit} = 1;
        }
    }

    sub rollbackTransaction
    {
        my($self) = shift;
        die "not in a transaction" unless ($self->{transLevel} > 0);
        $self->{dbh}->rollback;
        $self->{dbh}->{AutoCommit} = 1;
        $self->{transLevel} = 0;
    }

    sub DESTROY
    {
        my($dbh) = shift->{dbh};
        $dbh->disconnect if ($dbh);
    }

} # end of package TGCDB
