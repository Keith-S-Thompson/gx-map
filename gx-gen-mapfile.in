#!%PERL% -wT

# $Id: gx-gen-mapfile.in,v 1.76 2005-12-21 01:06:08-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-gen-mapfile.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2005 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Grid and Cluster Computing Group
# at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;

use File::Basename ();
use File::Copy ();
use Getopt::Long ();

sub Update_List(@);
sub Identical_Files($$);
sub User_Real_Name($);
sub Image($);
sub Usage(@);
sub Debug(@);
sub Debugf(@);

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use Gridmap_Utils ();

my $Data_Dir             = "$Install_Dir/var";
my $Default_Requests_Log = "$Data_Dir/requests.log";
my $Dot_Update           = "$Data_Dir/new-requests/.update";

my $Program_Name = File::Basename::basename $0;

my $User_Opt = { 'requests-log' => [],
                 'permissions'  => '444',
                 'merge-file'   => [],
                 'rcs'          => 1 };
my @Opts = ( $User_Opt,
             qw( help
                 version
                 debugging!
                 requests-log=s@
                 permissions=s
                 compatible!
                 merge-file=s@
                 all!
                 real-name!
                 rcs!
                 force! ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $Gridmap_Utils::VERSION\n";
    exit 0;
}

Gridmap_Utils::Install_Die_Handler;
Gridmap_Utils::Install_Warn_Handler;

#
# If the requests-log array is empty (i.e., the user didn't give the
# '-requests-log' option), set it to a single element consisting of the
# name of the default log.  If it's non-empty, replace any occurrence of
# 'default' with the name of the default log.
#
if (@{$User_Opt->{'requests-log'}}) {
    foreach my $log (@{$User_Opt->{'requests-log'}}) {
        #
        # $log is an alias for each element of the array, and can be
        # used to modify it.
        #
        if ($log eq 'default') {
            $log = $Default_Requests_Log;
            Debug "Setting \$log = \"$log\"\n";
        }
        elsif ($log =~ m<^(https?|ftp)://>) {
            #
            # Untaint the log file name so the Cache_File function can
            # use system() to pass it to curl.
            #
            Gridmap_Utils::Untaint $log;
            my $cache_result = Gridmap_Utils::Cache_File $log;
            if ($cache_result->{status} eq 'failed') {
                die "${log}: $cache_result->{error}\n";
            }
            #
            # We merely check that the Cache_File status isn't 'failed';
            # we don't distinguish between 'new', 'cached', and 'old'.
            # We might want to consider some kind of warning of the
            # status is 'old', indicating that the download failed but
            # we're using a previously cached copy.
            #
            $log = $cache_result->{filename};
        }
    }
}
else {
    $User_Opt->{'requests-log'} = [ $Default_Requests_Log ];
}

{
    my @log_errors = ();
    foreach my $log (@{$User_Opt->{'requests-log'}}) {
        if (not -e $log) {
            push @log_errors, "No file $log\n";
        }
        elsif (not -r $log) {
            push @log_errors, "Can't read $log\n";
        }
    }
    if (@log_errors) {
        die @log_errors;
    }
}

if ($User_Opt->{debugging}) {
    $Gridmap_Utils::Debugging = 1;
}

my @Output_Files = @ARGV;
my $Write_To_Stdout = (scalar @Output_Files == 0);
my %Force_Update = ();

#
# Untaint the output file names
#
foreach my $file (@Output_Files) {  
    Gridmap_Utils::Untaint $file;
}

if ($User_Opt->{permissions} !~ /^[0-7][0-7][0-7]$/) {
    Usage "Permissions must be a 3-digit octal number\n";
}
#
# $Octal_Permissions is a string representing the permissions
# in octal, suitable for display.
#
# $Permissions is the numeric equivalent, suitable for use with the
# chmod call.
#
my $Octal_Permissions = $User_Opt->{permissions};
my $Permissions = oct "0$Octal_Permissions";

if (not $Write_To_Stdout) {
    Debug "\@Output_Files = (@Output_Files)\n";
    @Output_Files = Update_List @Output_Files;
    Debug "\@Output_Files = (@Output_Files)\n";
    if (scalar @Output_Files == 0) {
        exit 0;
    }
}

my @args = ();
push @args, '-all' if $User_Opt->{all};
push @args, '-log';
push @args, @{$User_Opt->{'requests-log'}};

if (@{$User_Opt->{'merge-file'}}) {
    push @args, '-gridmap';
    push @args, @{$User_Opt->{'merge-file'}};
}

my $Mappings = Gridmap_Utils::Gen_Mappings @args;

my $tmp_file = "/tmp/gx-gen-mapfile-" . time . "-$$";
Gridmap_Utils::Register_Handler_Function sub { unlink $tmp_file };

my $Out = undef;

#
# If we're creating output files, write to a single temp file and
# copy it to the output files later.  Otherwise just write directly
# to stdout.
#
if ($Write_To_Stdout) {
    open $Out, '>&STDOUT';
}
else {
    open $Out, '>', $tmp_file or die "$tmp_file: $!\n";
}

my $Now = Gridmap_Utils::Time_Image time;
my $Hostname = Gridmap_Utils::Get_Hostname;
if ($User_Opt->{rcs}) {
    #
    # Split string literals so CVS doesn't expand the keywords in
    # this script.
    #
    print $Out '# $Id', ':$', "\n";
    print $Out '# $Source', ':$', "\n";
}

print $Out <<"EOF";
#
# Automatically generated by gx-gen-mapfile (gx-map $Gridmap_Utils::VERSION)
# at $Now on $Hostname.
# DO NOT EDIT THIS FILE.  ANY CHANGES YOU MAKE WILL BE LOST ON THE NEXT UPDATE.
#
EOF

#
# Now traverse the Mappings hash, sorted by DN, and generate a mapfile
#
foreach my $dn (sort keys %$Mappings) {
    my @dn_list = ( $dn );
    if ($User_Opt->{compatible}) {
        @dn_list = Gridmap_Utils::DN_List $dn;
    }
    my $mapping = $Mappings->{$dn};
    #
    # $mapping is a reference to a hash:
    #     keys are user names
    #     values are timestamps
    #
    # Sort names in reverse by timestamp, so the most recent
    # mapping appears first (and is the default).
    #
    my @names = sort { $mapping->{$b} cmp $mapping->{$a} } keys %$mapping;

    if (@names) {
        if ($User_Opt->{'real-name'}) {
            my @real_names = ();
            foreach my $name (@names) {
                my $real_name = User_Real_Name $name;
                push @real_names, ( defined $real_name ? $real_name : '?' );
            }
            foreach my $listed_dn (@dn_list) {
                print $Out "$listed_dn ",
                           join(',', @names),
                           " # ",
                           join(',', @real_names),
                           "\n";
            }
        }
        else {
            foreach my $listed_dn (@dn_list) {
                print $Out "$listed_dn ", join(',', @names), "\n";
            }
        }
    }
}
close $Out;

#
# If we were writing to stdout, we're done.
# Otherwise, copy the temp file to the target files.
#

if ($Write_To_Stdout) {
    exit 0;
}

if (-z $tmp_file) {
    #
    # Something went wrong.
    #
    die "$Program_Name generated an empty output file\n";
}
OUTPUT_FILE:
foreach my $output_file (@Output_Files) {
    if (not $Force_Update{$output_file} and
        Identical_Files $tmp_file, $output_file)
    {
        #
        # Nothing has changed; don't bother updating.
        #
        next OUTPUT_FILE;
    }
    #
    # Copy temporary file to an intermediate file in the same
    # directory as the target, then rename to the target file.
    # This should make the update an atomic operation (or nearly
    # so?), preventing any processes from seeing a partially updated
    # grid-mapfile.
    #
    # Gridmap_Utils::Check_Tainting '$output_file', $output_file;

    my $intermediate_file = $User_Opt->{rcs}
                                ? "$output_file.rcs"
                                : "${output_file}-tmp-$$";
    # Gridmap_Utils::Check_Tainting '$tmp_file', $tmp_file;
    # Gridmap_Utils::Check_Tainting '$intermediate_file', $intermediate_file;
    File::Copy::copy $tmp_file, $intermediate_file
        or die "$Program_Name: copy to $intermediate_file failed\n";
    if ($User_Opt->{rcs}) {
        my $dir = File::Basename::dirname $output_file;
        if (not -d "$dir/RCS") {
            mkdir "$dir/RCS", 0755 or die "mkdir $dir/RCS: $!\n";
            chmod 0755, "$dir/RCS" or die "chmod 0755 $dir/RCS: $!\n";
        } 
        Gridmap_Utils::Use_Commands 'rcs', 'ci';
        system "rcs -l $intermediate_file >/dev/null 2>/dev/null";
        system "ci -u -f $intermediate_file </dev/null >/dev/null 2>/dev/null";
    }

    # Gridmap_Utils::Check_Tainting '$output_file', $output_file;
    chmod $Permissions, $intermediate_file
        or die "chmod $Octal_Permissions, $intermediate_file: $!\n";
    rename $intermediate_file, $output_file
        or die "rename $intermediate_file, $output_file: $!\n";
}
unlink $tmp_file;

########################################################################

#
# Given a list of file names, returns a list of names of files that need
# to be updated.
#
# Checks the modification times of the ".update" file and /etc/passwd.
# On systems that don't use YP/NIS or something similar, this detects
# additions and deletions of user accounts.  On other systems (where
# new accounts aren't necessarily reflected in the /etc/passwd file),
# consider running "gx-map -update" periodically.
# 
# Side effect: updates %Force_Update for files that need to be updated
# even if they haven't changed.
#
sub Update_List(@) {
    my @Output_Files = @_;
    Debug "Entering Update_List\n";
    Debug "Output_Files:\n";
    foreach (@Output_Files) {
        Debug "    $_\n";
    }

    if ($User_Opt->{force}) {
        %Force_Update = map { $_ => 1 } @Output_Files;
        return @Output_Files;
    }

    my @result = ();

    my $newest_input_mtime = undef;

    my $dot_update_mtime = Gridmap_Utils::Get_mtime $Dot_Update;
    my $etc_passwd_mtime = Gridmap_Utils::Get_mtime '/etc/passwd';

    foreach my $log (@{$User_Opt->{'requests-log'}},
                     @{$User_Opt->{'merge-file'}})
    {
        my $mtime = Gridmap_Utils::Get_mtime $log;
        Debug "input mtime ", Gridmap_Utils::Long_Time_Image $mtime, "\n";
        if (not defined $newest_input_mtime or
            $mtime > $newest_input_mtime)
        {
            $newest_input_mtime = $mtime;
        }
    }

    foreach my $output_file (@Output_Files) {
        my $output_mtime = Gridmap_Utils::Get_mtime $output_file;
        Debug "output_file $output_file, output_mtime = " .
              (defined $output_mtime
                   ? Gridmap_Utils::Long_Time_Image $output_mtime
                   : 'undef') .
              "\n";
        if (defined $output_mtime) {
            if (( defined $dot_update_mtime and
                  $output_mtime <= $dot_update_mtime )
                or
                ( defined $etc_passwd_mtime and
                  $output_mtime <= $etc_passwd_mtime ))
            {
                #
                # The output file is older than the .update file
                # and/or the /etc/passwd file.
                # Regenerate the file and update it even if it hasn't changed.
                # (This may involve just updating the file's timestamp.)
                #
                $Force_Update{$output_file} = 1;
                push @result, $output_file;
            }
            elsif ($output_mtime <= $newest_input_mtime) {
                #
                # The output file is older than one or more of the input files.
                # Regenerate the file, but don't update it if it hasn't changed.
                #
                push @result, $output_file;
            }
            else {
                #
                # The output file is newer than any of the input files.
                # It's also newer than the .update file (or the
                # .update file doesn't exist).
                # Do nothing.
                #
            }
        }
        else {
            #
            # stat failed; presumably the output file is missing.
            # It's going to be updated anyay, so don't bother setting
            # $Force_Update{$output_file}
            #
            push @result, $output_file;
        }
    }
    return @result;
} # Update_List

# ----------------------------------------------------------------------

#
# Returns 1 (true) if the two files both exist and are identical,
# 0 otherwise.
#
sub Identical_Files($$) {
    my($filename1, $filename2) = @_;
    my $ok = 1;

    open my $File1, '<', $filename1 or return 0;
    open my $File2, '<', $filename2 or return 0;
    LINE:
    while (1) {
        my $line1 = scalar <$File1>;
        my $line2 = scalar <$File2>;
        if (defined $line1 and defined $line2) {
            if ($line1 ne $line2) {
                #
                # The files differ
                #
                $ok = 0;
                last LINE;
            }
        }
        elsif ((defined $line1 and not defined $line2) or
               (not defined $line1 and defined $line2))
        {
            #
            # One file is shorter than the other
            #
            $ok = 0;
            last LINE;
        }
        else {
            #
            # We've reached the end of both files; they're identical.
            #
            last LINE;
        }
    }
    close $File1;
    close $File2;
    return $ok;
} # Identical_Files

# ----------------------------------------------------------------------

sub User_Real_Name($) {
    my $pw = Gridmap_Utils::Get_PW $_[0];
    return undef if not $pw;
    my $gcos = $pw->{gcos};
    return undef if $gcos eq '';
    $gcos =~ s/,.*$//;
    return $gcos;
} # User_Real_Name

# ----------------------------------------------------------------------

#
# Returns '?' if the argument is undef, otherwise returns the argument.
#
sub Image($) {
    if (defined $_[0]) {
        return $_[0];
    }
    else {
        return '?';
    }
} # Image

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] [files]
Option names may be abbreviated.
    -help              : Display this message and exit.
    -version           : Display version information and exit.
    -requests-log file : Use specified requests log file.
                         May be given multiple times, e.g.,
                             -req file1 -req file2
                         If not specified, use the default
                         $Default_Requests_Log
                         which may be specified explicitly by the
                         name "default" (which may not be abbreviated.)
    -debugging         : Enable debugging output.
    -permissions perm  : Specify permissions (in octal); default is 444
    -compatible        : Generate a grid-mapfile compatible with both
                         GT2 and GT3/GT4.  By default, the generated
                         grid-mapfile is *not* compatible with GT2 for
                         certain DNs.
    -merge-file file   : Merge an existing grid-mapfile into the generated
                         file.  May be given multiple times, e.g.,
                             -merge file1 -merge file2
    -all               : Include entries for nonexistent accounts
                         (not normally recommended)
    -real-name         : Include real names as comments.
    -[no]rcs           : Check generated grid-mapfile(s) into RCS.
                         The RCS subdirectory is created if necessary.
                         The default is "-rcs"; use "-norcs" to disable.
                         The file checked into RCS will have a ".rcs" suffix
                         appended to its name.
                         This has no effect if the file is written to stdout.
    -force             : Force an update regardless of the timestamps of
                         the input and output files.
One or more output files may be specified on the command line.
If no output files are specified, output is written to stdout.
If output files are specified, they are generated only if necessary, i.e.,
if the input files are newer than the output files.
EOF
    exit 1;
} # Usage

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf
