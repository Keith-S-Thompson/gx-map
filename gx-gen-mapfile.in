#!%PERL% -T

# $Id: gx-gen-mapfile.in,v 1.96 2007-02-21 18:43:31-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/gx-gen-mapfile.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

use strict;
use warnings;

use File::Basename ();
use File::Copy ();
use Getopt::Long ();

sub Needs_Update($);
sub User_Real_Name($);
sub Image($);
sub Usage(@);
sub Debug(@);
sub Debugf(@);

# 
# Make warnings fatal.
# 
$SIG{__WARN__} = sub { die @_ };

my $Install_Dir;
BEGIN {
    $Install_Dir = '%INSTALL_DIR%';
    unshift @INC, "$Install_Dir/lib";
}
use GX ();

my $Data_Dir             = "$Install_Dir/gx-map-data";
my $Default_Requests_Log = "$Data_Dir/requests.log";

my $Program_Name = File::Basename::basename $0;

my $User_Opt = { 'requests-log'   => [],
                 'permissions'    => '444',
                 'merge-before'   => [],
                 'merge-after'    => [],
                 'multiple-users' => 1,
                 'rcs'            => 1,
                 'prerequisite'   => [] };
my @Opts = ( $User_Opt,
             qw( help
                 version
                 debugging!
                 requests-log=s@
                 permissions=s
                 gt2-compatible!
                 gt3-compatible!
                 merge-before=s@
                 merge-after=s@
                 multiple-users!
                 all!
                 real-name!
                 rcs!
                 force!
                 prerequisite=s@ ) );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $User_Opt->{help};
Usage "Multiple output files may not be specified\n" if scalar @ARGV > 1;

if ($User_Opt->{version}) {
    print "$Program_Name (gx-map) $GX::VERSION\n";
    exit 0;
}

GX::Check_Data_Dir;

GX::Install_Die_Handler;
GX::Install_Warn_Handler;

my @cache_files = ();

#
# If the requests-log array is empty (i.e., the user didn't give the
# '-requests-log' option), set it to a single element consisting of the
# name of the default log.  If it's non-empty, replace any occurrence of
# 'default' with the name of the default log.
#
if (@{$User_Opt->{'requests-log'}}) {
    foreach my $log (@{$User_Opt->{'requests-log'}}) {
        #
        # $log is an alias for each element of the array, and can be
        # used to modify it.
        #
        if ($log eq 'default') {
            $log = $Default_Requests_Log;
            Debug "Setting \$log = \"$log\"\n";
        }
        elsif ($log =~ m<^(https?|ftp)://>) {
            #
            # Untaint the log file name so the Cache_File function can
            # use system() to pass it to curl.
            #
            GX::Untaint $log;
            my $cache_result = GX::Cache_File $log;
            if ($cache_result->{status} eq 'failed') {
                die "${log}: $cache_result->{error}\n";
            }
            #
            # We merely check that the Cache_File status isn't 'failed';
            # we don't distinguish between 'new', 'cached', and 'old'.
            # We might want to consider some kind of warning of the
            # status is 'old', indicating that the download failed but
            # we're using a previously cached copy.
            #
            $log = $cache_result->{filename};
            push @cache_files, $log;
        }
    }
}
else {
    $User_Opt->{'requests-log'} = [ $Default_Requests_Log ];
}

{
    my @log_errors = ();
    foreach my $log (@{$User_Opt->{'requests-log'}}) {
        if (not -e $log) {
            push @log_errors, "No file $log\n";
        }
        elsif (not -r $log) {
            push @log_errors, "Can't read $log\n";
        }
    }
    if (@log_errors) {
        die @log_errors;
    }
}

if ($User_Opt->{debugging}) {
    $GX::Debugging = 1;
}

my $Output_File = (@ARGV ? $ARGV[0] : undef);

#
# Untaint the output file name
#
if (defined $Output_File) {
    GX::Untaint $Output_File;
}

if ($User_Opt->{permissions} !~ /^[0-7][0-7][0-7]$/) {
    Usage "Permissions must be a 3-digit octal number\n";
}
GX::Untaint $User_Opt->{permissions};
#
# $Octal_Permissions is a string representing the permissions
# in octal, suitable for display.
#
# $Permissions is the numeric equivalent, suitable for use with the
# chmod call.
#
my $Octal_Permissions = $User_Opt->{permissions};
my $Permissions = oct "0$Octal_Permissions";

if (defined $Output_File and
    not $User_Opt->{force} and
    not Needs_Update $Output_File)
{
    exit 0;
}

my @args = ();
push @args, '-all' if $User_Opt->{all};
push @args, '-log';
push @args, @{$User_Opt->{'requests-log'}};

if (@{$User_Opt->{'merge-before'}}) {
    push @args, '-gridmap-before';
    push @args, @{$User_Opt->{'merge-before'}};
}
if (@{$User_Opt->{'merge-after'}}) {
    push @args, '-gridmap-after';
    push @args, @{$User_Opt->{'merge-after'}};
}

my $Mappings = GX::Gen_Mappings @args;

foreach my $cache_file (@cache_files) {
    GX::Release_Cache_File $cache_file;
}

my $intermediate_file
    = $User_Opt->{rcs} ? "$Output_File.rcs" : "${Output_File}-tmp-$$";

my $tmp_file = "/tmp/gx-gen-mapfile-" . time . "-$$";
GX::Register_Handler_Function sub { unlink $intermediate_file };

my $Out = undef;

#
# If we're creating output files, write to an intermediate file and copy
# it to the output file later.  Otherwise just write directly to stdout.
#
if (defined $Output_File) {
    open $Out, '>', $intermediate_file or die "$intermediate_file: $!\n";
}
else {
    open $Out, '>&STDOUT';
}

my $Now = GX::Time_Image time;
my $Hostname = GX::Get_Hostname;
my $header = '';
if ($User_Opt->{rcs}) {
    #
    # Split string literals so CVS doesn't expand the keywords in
    # this script.
    #
    $header .= '# $Id' . ':$' . "\n"
    $header .= '# $Source' . ':$' . "\n"
}

$header .= <<"EOF";
#
# Automatically generated by gx-gen-mapfile (gx-map $GX::VERSION)
# at $Now on $Hostname.
#########################################################
# DO NOT EDIT THIS FILE.                                #
# ANY CHANGES YOU MAKE WILL BE LOST ON THE NEXT UPDATE. #
#########################################################
#
EOF

print $Out $header or die "$intermediate_file: $!\n";

#
# Now traverse the Mappings hash, sorted by DN, and generate a mapfile
#
DN:
foreach my $dn (sort keys %$Mappings) {
    my $mapping = $Mappings->{$dn};
    #
    # $mapping is a reference to a hash:
    #     keys are user names
    #     values are timestamps
    #
    # Sort names in reverse by timestamp, so the most recent
    # mapping appears first (and is the default).
    #
    my @names = sort { $mapping->{$b} cmp $mapping->{$a} } keys %$mapping;
    next DN if not @names;

    #
    # With the "-gt2-compatible" or "-gt3-compatible" option, we may
    # have more than one DN to handle here.
    #
    my @versions = ();
    push @versions, 'GT2' if $User_Opt->{'gt2-compatible'};
    push @versions, 'GT3' if $User_Opt->{'gt3-compatible'};
    push @versions, 'GT4'; # do this unconditionally
    my @dn_list = GX::DN_List $dn, @versions;
    my $name_list = join(',', @names);
    if (not $User_Opt->{'multiple-users'}) {
        #
        # Comment out everything after the first user name.
        # As below, be sure there's a space before the '#' character.
        #
        $name_list =~ s/,/ # ,/;
    }

    foreach my $listed_dn (@dn_list) {
        my $output_line = "$listed_dn $name_list";

        if ($User_Opt->{'real-name'}) {
            my @real_names = ();
            foreach my $name (@names) {
                my $real_name = User_Real_Name $name;
                push @real_names, ( defined $real_name ? $real_name : '?' );
            }
            #
            # Be sure there's a space before the '#' character.  The
            # grid-mapfile doesn't really support end-of-line comments;
            # everything after the username list is just ignored.
            #
            $output_line .= " # " . join(", ", @real_names);
        }

        #
        # Globus doesn't cleanly handle grid-mapfile lines longer than
        # about 1024 characters; see Globus Bugzilla #4180.  Such a
        # line probably indicates an error anyway, so treat it as one.
        # To be cautious, limit the length to 1000.
        #
        if (length $output_line >= 1000) {
            die "Error: Generated grid-mapfile entry is too long:\n",
                "$output_line\n";
        }

        print $Out "$output_line\n" or die "$intermediate_file: $!\n";
    }
}
close $Out or die "$intermediate_file: $!\n";

#
# If we were writing to stdout, we're done.
# Otherwise, rename the intermediate file to the target file.
#

if (not defined $Output_File) {
    exit 0;
}

if (-z $intermediate_file) {
    #
    # Something went wrong.
    #
    die "$Program_Name generated an empty output file\n";
}

if ($User_Opt->{rcs}) {
    my $dir = File::Basename::dirname $output_file;
    my $RCS_dir = "$dir/RCS";
    #
    # There was a possible race condition here.  If the mkdir call
    # fails, it could be because another gx-gen-mapfile process
    # created it after the "-d" test.  If the mkdir fails, check
    # whether the directory exists; if it does, ignore the error.
    # bug-0094.
    #
    if (not -d $RCS_dir) {
        if (not mkdir $RCS_dir, 0755) {
            my $mkdir_error = $!;
            if (not -d $RCS_dir) {
                die "$RCS_dir: $!\n";
            }
        }
    } 
    GX::Use_Commands 'rcs', 'ci';
    system "rcs -l $intermediate_file >/dev/null 2>/dev/null";
    system "ci -u -f $intermediate_file </dev/null >/dev/null 2>/dev/null";
}

chmod $Permissions, $intermediate_file
    or die "chmod $Octal_Permissions, $intermediate_file: $!\n";
rename $intermediate_file, $output_file
    or die "rename $intermediate_file, $output_file: $!\n";

########################################################################

#
# Given a file name, returns true if it needs to be updated.
#
# Checks the modification time of the /etc/passwd file.  On systems that
# don't use YP/NIS, LDAP, or something similar, this detects additions
# and deletions of user accounts.  On systems that do use such methods,
# consider running "touch .../requests.log" periodically, or specifying
# an additional prerequisite, or periodically using the "-force" option.
#
sub Needs_Update($) {
    my($Output_File) = @_;
    Debug "Entering Needs_Update(\"$Output_File\")\n";

    my $output_mtime = GX::Get_mtime $Output_File;
    if (not defined $output_mtime) {
        return 1;
    }

    my @inputs = ( '/etc/passwd',
                   @{$User_Opt->{'requests-log'}},
                   @{$User_Opt->{'merge-before'}},
                   @{$User_Opt->{'merge-after'}},
                   @{$User_Opt->{'prerequisite'}} );

    my $newest_input_mtime = undef;

    foreach my $input (@inputs) {
        my $mtime = GX::Get_mtime $input;
        if (not defined $newest_input_mtime or
            (defined $mtime and $mtime > $newest_input_mtime))
        {
            $newest_input_mtime = $mtime;
        }
    }

    if (not defined $newest_input_mtime) {
        die "Cannot determine mtime for any input files\n";
    }

    return $newest_input_mtime > $output_mtime;
} # Needs_Update

# ----------------------------------------------------------------------

# #
# # Returns 1 (true) if the two files both exist and are identical,
# # 0 otherwise.
# #
# sub Identical_Files($$) {
#     my($filename1, $filename2) = @_;
#     my $ok = 1;
# 
#     open my $File1, '<', $filename1 or return 0;
#     open my $File2, '<', $filename2 or return 0;
#     LINE:
#     while (1) {
#         my $line1 = scalar <$File1>;
#         my $line2 = scalar <$File2>;
#         if (defined $line1 and defined $line2) {
#             if ($line1 ne $line2) {
#                 #
#                 # The files differ
#                 #
#                 $ok = 0;
#                 last LINE;
#             }
#         }
#         elsif ((defined $line1 and not defined $line2) or
#                (not defined $line1 and defined $line2))
#         {
#             #
#             # One file is shorter than the other
#             #
#             $ok = 0;
#             last LINE;
#         }
#         else {
#             #
#             # We've reached the end of both files; they're identical.
#             #
#             last LINE;
#         }
#     }
#     close $File1;
#     close $File2;
#     return $ok;
# } # Identical_Files

# ----------------------------------------------------------------------

sub User_Real_Name($) {
    my $pw = GX::Get_PW_Name $_[0];
    return undef if not $pw;
    my $gcos = $pw->{gcos};
    return undef if $gcos eq '';
    $gcos =~ s/,.*$//;
    return $gcos;
} # User_Real_Name

# ----------------------------------------------------------------------

#
# Returns '?' if the argument is undef, otherwise returns the argument.
#
sub Image($) {
    if (defined $_[0]) {
        return $_[0];
    }
    else {
        return '?';
    }
} # Image

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Program_Name [options] [file]
Option names may be abbreviated.
    -help               : Display this message and exit.
    -version            : Display version information and exit.
    -requests-log file  : Use specified requests log file.
                          May be given multiple times, e.g.,
                              -req file1 -req file2
                          If not specified, use the default
                          $Default_Requests_Log
                          which may be specified explicitly by the
                          name "default" (which may not be abbreviated.)
    -debugging          : Enable debugging output.
    -permissions perm   : Specify permissions (in octal); default is 444
    -gt2-compatible     : Generate a grid-mapfile compatible with both
                          GT2 and GT3/GT4.  By default, the generated
                          grid-mapfile is *not* compatible with GT2 for
                          certain DNs.
    -gt3-compatible     : Generate a grid-mapfile compatible both with
                          GT3 WS (Web Services) and with GT4.  This is
                          rarely necessary.  This option can be used
                          together with the "-gt2-compatible" option.
    -merge-before file  : Merge an existing grid-mapfile into
                          the generated file.  Mappings from the
                          input grid-mapfile are treated as if they
                          were submitted in the past, so they'll be
                          overridden by any conflicting mappings from
                          the requests.log file.
    -merge-after file   : Merge an existing grid-mapfile into the
                          generated file.  Mappings from the input
                          grid-mapfile are treated as if they were
                          submitted in the near future, so they'll
                          override any conflicting mappings from the
                          requests.log file.
                          The -merge-before and -merge-after options
                          may both be given multiple times, e.g.,
                              -merge-before file1 \
                              -merge-before file2 \
                              -merge-after  file3
    -[no]multiple-users : Allow a DN to be mapped to multiple users.
                          This is the default.  With "-nomultiple-users",
                          all user names after the default one are
                          commented out.
    -all                : Include entries for nonexistent accounts
                          (not normally recommended)
    -real-name          : Include real names as comments.
    -[no]rcs            : Check generated grid-mapfile(s) into RCS.
                          The RCS subdirectory is created if necessary.
                          The default is "-rcs"; use "-norcs" to disable.
                          The file checked into RCS will have a ".rcs" suffix
                          appended to its name.
                          This has no effect if the file is written to stdout.
    -force              : Force an update regardless of the timestamps of
                          the input and output files.
    -prerequisite file  : Specify that the named file is to be treated as
                          a prerequisite for the generated grid-mapfile,
                          causing it to be regenerated if the prerequisite
                          has been updated.  The file is not processed
                          other than to check its timestamp.  This option
                          may be given multiple times.
One output file may be specified on the command line.
If no output file is specified, output is written to stdout.
If an output file is specified, it is generated only if necessary, i.e.,
if the input files are newer than the output file or if the output
file does not yet exist.
EOF
    exit 1;
} # Usage

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $User_Opt->{debugging};
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $User_Opt->{debugging};
} # Debugf
