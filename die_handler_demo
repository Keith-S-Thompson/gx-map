#!/usr/bin/perl -w

# $Id: die_handler_demo,v 1.4 2005-03-27 14:13:20-08 kst Exp $
# $Source: /home/kst/gx-map-redacted/die_handler_demo,v $

#
# This is an experimental Perl program designed to test an error traceback
# mechanism.
#

use strict;

sub Outer();
sub Inner();
sub Recurse($);
sub Die_Handler($);
sub Register_Handler_Function($);
sub Cleanup();

$SIG{__DIE__} = \&Die_Handler;

my $Registered_Handler_Function = undef;

#
# Die in Inner by default
#
my $Outer = 0;
my $Eval = 0;
my $Main = 0;
my $Recursive = 0;
my $Register = 0;

if (scalar @ARGV > 0) {
    if ($ARGV[0] eq '-o') {
        $Outer = 1;
    }
    elsif ($ARGV[0] eq '-e') {
        $Eval = 1;
    }
    elsif ($ARGV[0] eq '-m') {
        $Main = 1;
    }
    elsif ($ARGV[0] eq '-r') {
        $Recursive = 1;
    }
    elsif ($ARGV[0] eq '-R') {
        $Register = 1;
    }
    else {
        print "Usage: $0 [-i|-e]\n";
        print "    -o : die in Outer\n";
        print "    -e : die in eval()\n";
        print "    -r : die in recurse()\n";
        print "    -R : Register a handler function\n";
        print "dies in Inner by default\n";
        exit 1;
    }
}

if ($Register) {
    Register_Handler_Function \&Cleanup;
}

die "Die in main\n" if $Main;
eval "die \"Die in eval\n\"" if $Eval;

if ($Recursive) {
    Recurse 10;
}

Outer;

########################################################################

sub Outer() {
    die "Die in Outer\n" if $Outer;
    Inner;
} # Outer

# ----------------------------------------------------------------------

sub Inner() {
    die "die in Inner\n";
} # Inner

# ----------------------------------------------------------------------

sub Recurse($) {
    if ($_[0] == 0) {
        die "Die in Recurse\n";
    }
    else {
        Recurse $_[0] - 1;
    }
} # Recurse

# ----------------------------------------------------------------------

sub Die_Handler($) {
    if (defined $Registered_Handler_Function) {
        &$Registered_Handler_Function;
    }

    print STDERR $_[0];

    my @traceback = ();

    my $i = 0;
    while (1) {
        my @caller = caller $i;
        last if not @caller;
        push @traceback, { file    => $caller[1],
                           line    => $caller[2],
                           subname => $caller[3] };
        $i++;
    }

    print STDERR "Traceback:\n";
    for (my $i = 0; $i <= $#traceback; $i++) {
        my $curr = $traceback[$i];
        if ($i < $#traceback) {
            my $next = $traceback[$i+1];
            print STDERR "    $curr->{file}:$curr->{line} in ",
                         "$next->{subname}\n";
        }
        else {
            print STDERR "    $curr->{file}:$curr->{line}\n";;
        }
    }

    exit 1;
} # Die_Handler

# ----------------------------------------------------------------------

sub Register_Handler_Function($) {
    $Registered_Handler_Function = $_[0];
} # Register_Handler_Function

# ----------------------------------------------------------------------

sub Cleanup() {
    print "Registered routine cleaning up ...\n";
} # Cleanup
