# $Id: Error.pm.in,v 1.4 2007-09-07 15:50:39-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/Error.pm.in,v $

########################################################################
# @Copyright@
#
# Copyright (c) 2007 The Regents of the University of California. All
# rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this
# software must display the following acknowledgement: This product
# includes software developed by the Advanced Cyberinfrastructure
# Laboratory at the San Diego Supercomputer Center and its contributors.
#
# 4. Neither the name of the Center nor the names of its contributors
# may be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# @Copyright@
########################################################################

########################################################################
# Developed by Keith Thompson <kst@sdsc.edu>
########################################################################

# Installed in lib/GX subdirectory.

# This package provides a way for routines in gx-map to return an error
# indication in a uniform way.  Usage:
#
#     return new GX::Error "Error message";
#
# The GX::Is_Error function can be used to determine whether something
# is an error reference.  For example:
#
#     my $result = Some_Func(foo, bar);
#     if (GX::Is_Error $result) {
#         # handle the error
#         # $result->{message} is the error message, which should be
#         # a one-line message with no trailing "\n".
#         # $result->{traceback} is a multi-line "\n"-terminated string
#         # containing a stack traceback.
#     }
#     else {
#         # We have a valid result from Some_Func()
#     }
#
# At this writing, no functions actually use this mechanism, but that
# will change over time.

use strict;
use warnings;

package GX::Error;

sub new($$);
sub Message($);
sub Traceback($);
sub Is_Error($);

########################################################################

sub new($$) {
    my($class, $message) = @_;

    my @traceback_list = ();
    my $level = 0;
    while (1) {
        my @caller = caller $level;
        last if not @caller;
        push @traceback_list, { file    => $caller[1],
                                line    => $caller[2],
                                subname => $caller[3] };
        $level++;
    }
    my $traceback = '';
    for (my $i = 0; $i <= $#traceback_list; $i++) {
        my $curr = $traceback_list[$i];
        if ($i < $#traceback_list) {
            my $next = $traceback_list[$i+1];
            $traceback
                .= "    $curr->{file}:$curr->{line} in $next->{subname}\n";
        }
        else {
            $traceback .= "    $curr->{file}:$curr->{line}\n";
        }
    }

    return bless { message => $message, traceback => $traceback }, $class;
} # new

# ----------------------------------------------------------------------

sub Message($) {
    return shift->{message};
} # Message

# ----------------------------------------------------------------------

sub Traceback($) {
    return shift->{traceback};
} # Message

# ----------------------------------------------------------------------

#
# Returns true if the argument is a GX::Error object, false otherwise.
#
sub Is_Error($) {
    my($arg) = @_;
    return ref $arg eq __PACKAGE__;
} # Is_Error

# ----------------------------------------------------------------------

1;
