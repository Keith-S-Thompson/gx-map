#!/usr/bin/perl -wT

# $Id: chown-test,v 1.1 2004-08-25 21:29:10-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/chown-test,v $

use strict;

sub Dir_Error($);
sub Untaint(\$);
sub Debug(@);
sub Debugf(@);

my $Debugging = undef;

foreach my $arg (@ARGV) {
    if ($arg eq '-d') {
        $Debugging = 1;
        next;
    }
    my $err = Dir_Error $arg;
    if (defined $err) {
        print "$err\n";
    }
    else {
        print "No error for $arg\n";
    }
}

########################################################################

#
# Argument is the name of a directory to be used as the
# "new-requests" directory.
# If the directory is ok, returns undef (denoting no error).
# Otherwise, returns a message describing the problem.
# Directory must have permissions 1733, and must *not* allow
# chown by non-root users.
#
sub Dir_Error($) {
    my($dir) = @_;
    Debug "Entering Dir_Error(\"$dir\")\n";
    my $running_as_root = ($< == 0);
    return "$dir does not exist"     if not -e $dir;
    return "$dir is not a directory" if not -d $dir;
    my @stat = stat $dir;
    return "Cannot stat $dir" if not @stat;
    my $mode = $stat[2] & 07777;
    Debugf "mode = 0%o\n", $mode;
    if ($mode != 01733) {
        return "Bad permissions on $dir, should be 1733";
    }

    my $temp_file_name = "$dir/tmp-" . time . "-$$";
    my $result = undef;
    if ($running_as_root) {
        $< = 1;
    }
    Untaint $temp_file_name;
    open TEMP, ">$temp_file_name" or return "Cannot create file in $dir";
    close TEMP;
    if (chown(0, 0, $temp_file_name) == 1) {
        $result = "$dir allows non-root chown";
    }
    unlink $temp_file_name;
    if ($running_as_root) {
        $< = 0;
    }
    return $result;
} # Dir_Error

# ----------------------------------------------------------------------

sub Untaint(\$) { 
    my($ref) = @_;
    ($$ref) = ($$ref =~ /(.*)/);
} # Untaint

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $Debugging;
} # Debug

# ----------------------------------------------------------------------

sub Debugf(@) {
    printf @_ if $Debugging;
} # Debugf
