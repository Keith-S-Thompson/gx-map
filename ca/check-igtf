#!/usr/bin/perl

# $Id: check-igtf,v 1.13 2007-08-06 16:11:18-07 kst Exp $
# $Source: /home/kst/gx-map-redacted/ca/check-igtf,v $

#
# TODO:
#     Check for missing fields.
#     Set status on URLs depending on whether they can be accessed.
#

use strict;
use warnings;

sub Set_cadesc_Info($);
sub Set_Cert_Info($);
sub Set_Signing_Policy_Info($);
sub Set_igtf_Info($);
sub Check_Consistency($);
sub All_Equal(@);
sub Status_Image($);

sub Usage(@);

my $hash_pattern = qr([\da-f]{8});

my %hash_requested = ();
my $all_requested = 0;

my $ca_dir = "$ENV{HOME}/cvs-kst/tools/gx-map/ca";
my $default_igtf_subdir = '1.16';
my $igtf_subdir = $default_igtf_subdir;

foreach my $arg (@ARGV) {
    if ($arg =~ /^($hash_pattern)/) {
        $hash_requested{$1} = 1;
    }
    elsif ($arg eq '-all') {
        $all_requested = 1;
    }
    elsif (-d "$ca_dir/.igtf-$arg") {
        $igtf_subdir = $arg;
    }
    else {
        Usage "Unrecognized argument $arg\n";
    }
}

my $igtf_version = $igtf_subdir;
$igtf_version =~ s/-pre$//;
my $igtf_dir = "$ca_dir/.igtf-$igtf_subdir/igtf-policy-installation-bundle-$igtf_version/src";

if (not -d $igtf_dir) {
    die "No directory $igtf_dir\n";
}

if (scalar keys %hash_requested == 0 and not $all_requested) {
    Usage "No hashes requested\n";
}

die "No file $ca_dir\n"   if not -d $ca_dir;
die "No file $igtf_dir\n" if not -d $igtf_dir;

opendir my $IGTF, $igtf_dir or die "$igtf_dir: $!\n";
my @igtf_subdirs = sort grep !/^\./, readdir $IGTF;
closedir $IGTF;

my $cadesc_info = {};

opendir my $CA_DIR, $ca_dir or die "$ca_dir: $!\n";
my @files = sort grep { /\.cadesc$/ and not /^00000000/ } readdir $CA_DIR;
closedir $CA_DIR;

foreach my $file (@files) {
    my $hash = $file;
    $hash =~ s/\..*$//;
    if ($all_requested or $hash_requested{$hash}) {
        # print ">>> Getting info for $hash\n";
        die "Bad hash $hash, file $file\n" if $hash !~ /^$hash_pattern$/;
        $cadesc_info->{$hash}->{HASH} = $hash;
        $cadesc_info->{$hash}->{CADESC_FILENAME} = "$ca_dir/$file";
        Set_cadesc_Info         $cadesc_info->{$hash};
        Set_Cert_Info           $cadesc_info->{$hash};
        Set_igtf_Info           $cadesc_info->{$hash};
        Set_Signing_Policy_Info $cadesc_info->{$hash};
        Check_Consistency       $cadesc_info->{$hash};
    }
}

foreach my $hash (sort keys %$cadesc_info) {
    print "$hash {\n";
    my $ref = $cadesc_info->{$hash};
    foreach my $key (sort keys %$ref) {
        next if not defined $ref->{$key};
        if (ref $ref->{$key} eq 'ARRAY') {
            my @arr = @{$ref->{$key}};
            foreach my $elem (@arr) {
                printf "    %-20s => %s\n", $key, $elem;
            }
        }
        elsif (ref $ref->{$key} eq 'HASH') {
            printf "    %-20s => {\n", $key;
            foreach my $subkey (sort keys %{$ref->{$key}}) {
                next if $subkey eq '_status';
                #
                # Some nonexistent keys may have been autovivified to undef
                #
                next if not defined $ref->{$key}->{$subkey};
                my $status = $ref->{$key}->{_status}->{$subkey};
                $status = '' if not defined $status;
                if (ref $ref->{$key}->{$subkey} eq 'ARRAY') {
                    printf "%-8s%-20s => [\n",
                           $status, $subkey;
                    foreach my $elem (@{$ref->{$key}->{$subkey}}) {
                        printf "%-12s%s\n", $status, $elem;
                    }
                    printf "%-8s%s\n", $status, ']';
                }
                else {
                    printf "%-8s%-20s => %s\n",
                           $status, $subkey, $ref->{$key}->{$subkey};
                }
            }
            print "    }\n";
        }
        else {
            printf "    %-20s => %s\n", $key, $ref->{$key};
        }
    }
    print "}\n\n";
}

########################################################################

sub Set_cadesc_Info($) {
    my($ref) = @_;

    my $filename = $ref->{CADESC_FILENAME};
    my $CADESC = undef;
    if (not open $CADESC, '<', $filename) {
        push @{$ref->{ERROR}}, "${filename}: $!\n";
        return;
    }
    while (<$CADESC>) {
        s/#.*$//;
        s/^\s+//;
        s/\s+$//;
        next if /^$/;
        if (/^(\w+)\s+(.*)$/) {
            my($key, $value) = ($1, $2);
            if ($key eq 'MAY_SIGN') {
                push @{$ref->{cadesc}->{$key}}, $value;
            }
            else {
                $ref->{cadesc}->{$key} = $value;
            }
        }
        else {
            die "${filename}:$.: Syntax error\n";
        }
    }
    close $CADESC;
} # Set_cadesc_Info

# ----------------------------------------------------------------------

sub Set_Cert_Info($) {
    my($ref) = @_;
    my $certificate_url = $ref->{cadesc}->{CERTIFICATE_URL};
    my $crl_url = $ref->{cadesc}->{CRL_URL};
    my $command = 'cert-info';
    if (defined $certificate_url) {
        $command .= " '$certificate_url'";
    }
    if (defined $crl_url and $crl_url ne '?') {
        $command .= " '$crl_url'";
    }

    my $section = 'certificate'; # 'certificate' or 'crl'

    my $PIPE = undef;
    if (not open $PIPE, "$command 2>/dev/null |") {
        push @{$ref->{ERROR}}, "${command}: $!";
        return;
    }
    while (<$PIPE>) {
        if (/^$/) {
            $section = 'crl';
        }
        elsif (/^File type\s+(.*)$/) {
            $ref->{$section}->{file_type} = $1;
        }
        elsif (/^hash\s+($hash_pattern)$/) {
            $ref->{$section}->{hash} = $1;
        }
        elsif (/^md5 fingerprint\s+(.*)$/) {
            $ref->{$section}->{md5} = $1;
        }
        elsif (/^sha1 fingerprint\s+(.*)$/) {
            $ref->{$section}->{sha1} = $1;
        }
        elsif (/^issuer\s+(.*)$/) {
            $ref->{$section}->{issuer} = $1;
        }
        elsif (/^subject\s+(.*)$/) {
            $ref->{$section}->{subject} = $1;
        }
        elsif (/^not before\s+(.*)$/) {
            $ref->{$section}->{not_before} = $1;
        }
        elsif (/^not after\s+(.*)$/) {
            $ref->{$section}->{not_after} = $1;
        }
        elsif (/^verification\s+(.*)$/) {
            $ref->{$section}->{verification} = $1;
        }
    }
    close $PIPE;
    if ($?) {
        push @{$ref->{ERROR}}, ("openssl: " . Status_Image $?);
    }
} # Set_Cert_Info

# ----------------------------------------------------------------------

sub Set_igtf_Info($) {
    my($ref) = @_;

    my $info_file = undef;
    my $signing_policy_file = undef;

    foreach my $subdir (@igtf_subdirs) {
        if (-e "$igtf_dir/$subdir/$ref->{HASH}.info") {
            $info_file = "$igtf_dir/$subdir/$ref->{HASH}.info";
        }
        if (-e "$igtf_dir/$subdir/$ref->{HASH}.signing_policy") {
            $signing_policy_file = "$igtf_dir/$subdir/$ref->{HASH}.signing_policy";
        }
        last if defined $info_file and defined $signing_policy_file;
    }
    if (not defined $info_file) {
        push @{$ref->{ERROR}}, "No IGTF info file";
    }
    if (not defined $signing_policy_file) {
        push @{$ref->{ERROR}}, "No IGTF signing_policy file";
    }

    if (defined $info_file) {
        my $INFO = undef;
        if (not open $INFO, '<', $info_file) {
            push @{$ref->{ERROR}}, "${info_file}: $!";
            return;
        }
        while (<$INFO>) {
            s/#.*$//;
            s/^\s+//;
            s/\s+$//;
            next if /^$/;
            if (/^([\w.]+)\s+=\s+(.*)$/) {
                $ref->{igtf}->{$1} = $2;
            }
            else {
                die "$info_file:$.: Syntax error\n";
            }
        }
        close $INFO;
        $ref->{IGTF_INFO_FILE} = $info_file;
    }

    if (defined $signing_policy_file) {
        $ref->{IGTF_SIGNING_POLICY_FILE} = $signing_policy_file;
    }
} # Set_igtf_Info

# ----------------------------------------------------------------------

sub Set_Signing_Policy_Info($) {
    my($ref) = @_;
    my $signing_policy_url = $ref->{cadesc}->{SIGNING_POLICY_URL};
    if (defined $signing_policy_url and $signing_policy_url ne '?') {
        my $PIPE = undef;
        if (open $PIPE, "curl --silent --fail --location --insecure $signing_policy_url | may-sign |") {
            while (<$PIPE>) {
                if (/^(\w+)\s+(.*)$/) {
                    my($key, $value) = ($1, $2);
                    if ($key eq 'MAY_SIGN') {
                        push @{$ref->{signing_policy}->{$key}}, $value;
                    }
                    else {
                        $ref->{signing_policy}->{$key} = $value;
                    }
                }
                else {
                    die "may-sign:$.: Syntax error\n";
                }
            }
        }
        close $PIPE;
    }

    if (defined $ref->{IGTF_SIGNING_POLICY_FILE}) {
        my $PIPE = undef;
        if (open $PIPE, "may-sign $ref->{IGTF_SIGNING_POLICY_FILE} |") {
            while (<$PIPE>) {
                if (/^(\w+)\s+(.*)$/) {
                    my($key, $value) = ($1, $2);
                    if ($key eq 'MAY_SIGN') {
                        push @{$ref->{igtf_signing_policy}->{$key}}, $value;
                    }
                    else {
                        $ref->{igtf_signing_policy}->{$key} = $value;
                    }
                }
                else {
                    die "may-sign:$.: Syntax error\n";
                }
            }
        }
        close $PIPE;
    }
} # Set_Signing_Policy_Info

# ----------------------------------------------------------------------

sub Check_Consistency($) {
    my($ref) = @_;

    #
    # Check for required keys.  Not all of these are actually required
    # by gx-ca-update, but they should all be present in any distributed
    # *.cadesc file.
    #
    my @missing = ();
    foreach my $key (qw( CA_NAME HOMEPAGE CONTACT HASH SIGNED_BY
                         SUBJECT MAY_SIGN CERTIFICATE_MD5
                         CERTIFICATE_SHA1 CERTIFICATE_URL
                         SIGNING_POLICY_URL CRL_URL CERT_BEGINS
                         CERT_EXPIRES ))
    {
        if (not defined $ref->{cadesc}->{$key}) {
            push @missing, $key;
        }
    }
    if (@missing) {
        my $s = scalar @missing == 1 ? '' : 's';
        push @{$ref->{ERROR}}, "Missing key$s in cadesc: @missing";
    }

    @missing = ();
    foreach my $key (qw( file_type hash issuer md5
                         not_after not_before
                         sha1 subject ))
    {
        if (not defined $ref->{certificate}->{$key}) {
            push @missing, "Missing $key in certificate";
        }
    }
    if (@missing) {
        my $s = scalar @missing == 1 ? '' : 's';
        push @{$ref->{ERROR}}, "Missing key$s in certificate: @missing";
    }

    @missing = ();
    #
    # TODO: Check for missing fields in other sections.
    #

    #
    # Check hash
    #
    {
        my @list = ();
        foreach my $item ( $ref->{cadesc}->{HASH},
                           $ref->{certificate}->{hash},
                           $ref->{crl}->{hash} )
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{HASH} =
        $ref->{crl}->{_status}->{hash} =
        $ref->{certificate}->{_status}->{hash} = $status;
        if ($status ne 'ok') {
            push @{$ref->{ERROR}}, "HASH mismatch";
        }
    }

    #
    # Check SUBJECT
    #
    {
        my @list = ();
        foreach my $item ( $ref->{cadesc}->{SUBJECT},
                           $ref->{certificate}->{subject},
                           $ref->{signing_policy}->{SUBJECT},
                           $ref->{igtf_signing_policy}->{SUBJECT},
                           $ref->{crl}->{issuer},
                           $ref->{igtf}->{subject} )
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{SUBJECT} =
        $ref->{certificate}->{_status}->{subject} =
        $ref->{signing_policy}->{_status}->{SUBJECT} =
        $ref->{igtf_signing_policy}->{_status}->{SUBJECT} =
        $ref->{crl}->{_status}->{issuer} =
        $ref->{igtf}->{_status}->{subject} = $status;
        if ($status ne 'ok') {
            push @{$ref->{ERROR}}, "SUBJECT mismatch";
        }
    }

    #
    # Check SIGNED_BY / issuer
    #
    {
        my @list = ();
        my $SIGNED_BY = $ref->{cadesc}->{SIGNED_BY};
        if ($SIGNED_BY eq 'self') {
            $SIGNED_BY = $ref->{cadesc}->{SUBJECT};
        }
        foreach my $item ( $SIGNED_BY,
                           $ref->{certificate}->{issuer} )
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{SIGNED_BY} =
        $ref->{certificate}->{_status}->{issuer} = $status;
        if ($status ne 'ok') {
            push @{$ref->{ERROR}}, "SIGNED_BY / issuer mismatch";
        }
    }

    #
    # Check CERTIFICATE_FORM
    #
    {
        my $CERTIFICATE_FORM = $ref->{cadesc}->{CERTIFICATE_FORM};
        if (not defined $CERTIFICATE_FORM) {
            $CERTIFICATE_FORM = 'PEM';
        }
        my $file_type = $ref->{certificate}->{file_type};
        if (defined $file_type and $file_type =~ /^Certificate, (.*) format$/) {
            $file_type = $1;
        }
        else {
            $file_type = 'unknown';
        }
        my @list = ();
        foreach my $item ( $CERTIFICATE_FORM,
                           $file_type )
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CERTIFICATE_FORM} =
        $ref->{certificate}->{_status}->{file_type} = $status;
        if ($status ne 'ok') {
            push @{$ref->{ERROR}}, "CERTIFICATE_FORM mismatch";
        }
    }

    #
    # Check CRL_FORM
    #
    {
        my $CRL_FORM;
        if (not defined $ref->{cadesc}->{CRL_URL} or
            $ref->{cadesc}->{CRL_URL} eq '?')
        {
            $CRL_FORM = 'unknown';
        }
        else {
            $CRL_FORM = $ref->{cadesc}->{CRL_FORM};
            if (not defined $CRL_FORM) {
                $CRL_FORM = 'PEM';
            }
        }

        my $file_type = $ref->{crl}->{file_type};
        if (defined $file_type and $file_type =~ /^CRL, (.*) format$/) {
            $file_type = $1;
        }
        else {
            $file_type = 'unknown';
        }
        my @list = ();
        foreach my $item ( $CRL_FORM,
                           $file_type )
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CRL_FORM} =
        $ref->{crl}->{_status}->{file_type} = $status;
        if ($status ne 'ok') {
            push @{$ref->{ERROR}}, "CRL_FORM mismatch";
        }
    }

    #
    # Check SHA1 fingerprint
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CERTIFICATE_SHA1},
                          $ref->{igtf}->{'sha1fp.0'},
                          $ref->{certificate}->{sha1})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CERTIFICATE_SHA1} =
        $ref->{igtf}->{_status}->{'sha1fp.0'} =
        $ref->{certificate}->{_status}->{sha1} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "SHA1 mismatch";
        }
    }

    #
    # Check MD5 fingerprint
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CERTIFICATE_MD5},
                          $ref->{certificate}->{md5})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CERTIFICATE_MD5} =
        $ref->{certificate}->{_status}->{md5} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "MD5 mismatch";
        }
    }

    #
    # Check CRL URL
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CRL_URL},
                          $ref->{igtf}->{crl_url})
        {
            push @list, $item if defined $item;

        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CRL_URL} =
        $ref->{igtf}->{_status}->{crl_url} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "CRL_URL mismatch";
        }
    }

    #
    # Check CRL verification
    #
    {
        my $verification = $ref->{crl}->{verification};
        my $status;
        if (defined $verification) {
            if ($verification =~ /^Signed by /) {
                $status = 'ok';
            }
            else {
                $status = 'ERR';
            }
        }
        $ref->{crl}->{_status}->{verification} = $status;
    }

    #
    # Check HOMEPAGE / url
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{HOMEPAGE},
                          $ref->{igtf}->{url})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{HOMEPAGE} =
        $ref->{igtf}->{_status}->{url} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "HOMEPAGE / url mismatch";
        }
    }

    #
    # Check CONTACT / email
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CONTACT},
                          $ref->{igtf}->{email})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CONTACT} =
        $ref->{igtf}->{_status}->{email} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "CONTACT / email mismatch";
        }
    }

    #
    # Check CERT_BEGINS / not_before
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CERT_BEGINS},
                          $ref->{certificate}->{not_before})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CERT_BEGINS} =
        $ref->{certificate}->{_status}->{not_before} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "CERT_BEGINS / not_before mismatch";
        }
    }

    #
    # Check CERT_EXPIRES / not_after
    #
    {
        my @list = ();
        foreach my $item ($ref->{cadesc}->{CERT_EXPIRES},
                          $ref->{certificate}->{not_after})
        {
            push @list, $item if defined $item;
        }
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{CERT_EXPIRES} =
        $ref->{certificate}->{_status}->{not_after} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "CERT_EXPIRES / not_after mismatch";
        }
    }

    #
    # Check MAY_SIGN
    #
    {
        my $may_sign0 = $ref->{cadesc}->{MAY_SIGN};
        my $may_sign1 = $ref->{signing_policy}->{MAY_SIGN};
        my $may_sign2 = $ref->{igtf_signing_policy}->{MAY_SIGN};
        my @list = ();
        push @list, join("\n", sort @$may_sign0) if defined $may_sign0;
        push @list, join("\n", sort @$may_sign1) if defined $may_sign1;
        push @list, join("\n", sort @$may_sign2) if defined $may_sign2;
        my $status = All_Equal(@list) ? 'ok' : 'ERR';
        $ref->{cadesc}->{_status}->{MAY_SIGN} =
        $ref->{signing_policy}->{_status}->{MAY_SIGN} =
        $ref->{igtf_signing_policy}->{_status}->{MAY_SIGN} = $status;
        if ($status ne 'ok') {
            push @{$ref->{'ERROR'}}, "MAY_SIGN / signing_policy mismatch";
        }
    }

} # Check_Consistency

# ----------------------------------------------------------------------

sub All_Equal(@) {
    my(@list) = @_;
    for (my $i = 0; $i < $#list; $i ++) {
        if ($list[$i] ne $list[$i+1]) {
            return 0;
        }
    }
    return 1;
} # All_Equal

# ----------------------------------------------------------------------

#
# Legible image of $?
#
sub Status_Image($) {
    my($status) = @_;
    my @list = ();
    my $signal = $? & 0x7f;
    my $coredumped = $? & 0x80;
    my $exit_status = $? >> 8;
    if ($signal != 0) {
        push @list, "Signal $signal";
    }
    if ($coredumped) {
        push @list, "core dumped";
    }
    if ($exit_status != 0) {
        push @list, "Exit $exit_status";
    }
    if (not @list) {
        push @list, "Exit 0";
    }
    return join(", ", @list);
} # Status_Image

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $0 [arguments]
    -all        Show all 
    xxxxxxxx*   An 8-digit hexadecimal hash.
                Characters after the first 8 are ignored, allowing the
                use of *.cadesc file names.
    <version>   IGTF release version; current default is $default_igtf_subdir
EOF
    exit 0;
} # Usage
